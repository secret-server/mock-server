// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
    "net/http"

    "github.com/go-openapi/runtime"

    "github.com/secret-server/mock-server/models"
)

// UsersServiceGetUserRolesOKCode is the HTTP code returned for type UsersServiceGetUserRolesOK
const UsersServiceGetUserRolesOKCode int = 200

/*
UsersServiceGetUserRolesOK User role summary

swagger:response usersServiceGetUserRolesOK
*/
type UsersServiceGetUserRolesOK struct {

    /*
      In: Body
    */
    Payload *models.PagingOfUserRoleSummary `json:"body,omitempty"`
}

// NewUsersServiceGetUserRolesOK creates UsersServiceGetUserRolesOK with default headers values
func NewUsersServiceGetUserRolesOK() *UsersServiceGetUserRolesOK {

    return &UsersServiceGetUserRolesOK{}
}

// WithPayload adds the payload to the users service get user roles o k response
func (o *UsersServiceGetUserRolesOK) WithPayload(payload *models.PagingOfUserRoleSummary) *UsersServiceGetUserRolesOK {
    o.Payload = payload
    return o
}

// SetPayload sets the payload to the users service get user roles o k response
func (o *UsersServiceGetUserRolesOK) SetPayload(payload *models.PagingOfUserRoleSummary) {
    o.Payload = payload
}

// WriteResponse to the client
func (o *UsersServiceGetUserRolesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

    rw.WriteHeader(200)
    if o.Payload != nil {
        payload := o.Payload
        if err := producer.Produce(rw, payload); err != nil {
            panic(err) // let the recovery middleware deal with this
        }
    }
}

// UsersServiceGetUserRolesBadRequestCode is the HTTP code returned for type UsersServiceGetUserRolesBadRequest
const UsersServiceGetUserRolesBadRequestCode int = 400

/*
UsersServiceGetUserRolesBadRequest Bad request

swagger:response usersServiceGetUserRolesBadRequest
*/
type UsersServiceGetUserRolesBadRequest struct {

    /*
      In: Body
    */
    Payload *models.BadRequestResponse `json:"body,omitempty"`
}

// NewUsersServiceGetUserRolesBadRequest creates UsersServiceGetUserRolesBadRequest with default headers values
func NewUsersServiceGetUserRolesBadRequest() *UsersServiceGetUserRolesBadRequest {

    return &UsersServiceGetUserRolesBadRequest{}
}

// WithPayload adds the payload to the users service get user roles bad request response
func (o *UsersServiceGetUserRolesBadRequest) WithPayload(payload *models.BadRequestResponse) *UsersServiceGetUserRolesBadRequest {
    o.Payload = payload
    return o
}

// SetPayload sets the payload to the users service get user roles bad request response
func (o *UsersServiceGetUserRolesBadRequest) SetPayload(payload *models.BadRequestResponse) {
    o.Payload = payload
}

// WriteResponse to the client
func (o *UsersServiceGetUserRolesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

    rw.WriteHeader(400)
    if o.Payload != nil {
        payload := o.Payload
        if err := producer.Produce(rw, payload); err != nil {
            panic(err) // let the recovery middleware deal with this
        }
    }
}

// UsersServiceGetUserRolesForbiddenCode is the HTTP code returned for type UsersServiceGetUserRolesForbidden
const UsersServiceGetUserRolesForbiddenCode int = 403

/*
UsersServiceGetUserRolesForbidden Authentication failed

swagger:response usersServiceGetUserRolesForbidden
*/
type UsersServiceGetUserRolesForbidden struct {

    /*
      In: Body
    */
    Payload *models.AuthenticationFailedResponse `json:"body,omitempty"`
}

// NewUsersServiceGetUserRolesForbidden creates UsersServiceGetUserRolesForbidden with default headers values
func NewUsersServiceGetUserRolesForbidden() *UsersServiceGetUserRolesForbidden {

    return &UsersServiceGetUserRolesForbidden{}
}

// WithPayload adds the payload to the users service get user roles forbidden response
func (o *UsersServiceGetUserRolesForbidden) WithPayload(payload *models.AuthenticationFailedResponse) *UsersServiceGetUserRolesForbidden {
    o.Payload = payload
    return o
}

// SetPayload sets the payload to the users service get user roles forbidden response
func (o *UsersServiceGetUserRolesForbidden) SetPayload(payload *models.AuthenticationFailedResponse) {
    o.Payload = payload
}

// WriteResponse to the client
func (o *UsersServiceGetUserRolesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

    rw.WriteHeader(403)
    if o.Payload != nil {
        payload := o.Payload
        if err := producer.Produce(rw, payload); err != nil {
            panic(err) // let the recovery middleware deal with this
        }
    }
}

// UsersServiceGetUserRolesInternalServerErrorCode is the HTTP code returned for type UsersServiceGetUserRolesInternalServerError
const UsersServiceGetUserRolesInternalServerErrorCode int = 500

/*
UsersServiceGetUserRolesInternalServerError Internal server error

swagger:response usersServiceGetUserRolesInternalServerError
*/
type UsersServiceGetUserRolesInternalServerError struct {

    /*
      In: Body
    */
    Payload *models.InternalServerErrorResponse `json:"body,omitempty"`
}

// NewUsersServiceGetUserRolesInternalServerError creates UsersServiceGetUserRolesInternalServerError with default headers values
func NewUsersServiceGetUserRolesInternalServerError() *UsersServiceGetUserRolesInternalServerError {

    return &UsersServiceGetUserRolesInternalServerError{}
}

// WithPayload adds the payload to the users service get user roles internal server error response
func (o *UsersServiceGetUserRolesInternalServerError) WithPayload(payload *models.InternalServerErrorResponse) *UsersServiceGetUserRolesInternalServerError {
    o.Payload = payload
    return o
}

// SetPayload sets the payload to the users service get user roles internal server error response
func (o *UsersServiceGetUserRolesInternalServerError) SetPayload(payload *models.InternalServerErrorResponse) {
    o.Payload = payload
}

// WriteResponse to the client
func (o *UsersServiceGetUserRolesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

    rw.WriteHeader(500)
    if o.Payload != nil {
        payload := o.Payload
        if err := producer.Produce(rw, payload); err != nil {
            panic(err) // let the recovery middleware deal with this
        }
    }
}
