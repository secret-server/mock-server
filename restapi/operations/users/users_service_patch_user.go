// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/golang-jwt/jwt"
)

// UsersServicePatchUserHandlerFunc turns a function with the right signature into a users service patch user handler
type UsersServicePatchUserHandlerFunc func(UsersServicePatchUserParams, *jwt.MapClaims) middleware.Responder

// Handle executing the request and returning a response
func (fn UsersServicePatchUserHandlerFunc) Handle(params UsersServicePatchUserParams, principal *jwt.MapClaims) middleware.Responder {
	return fn(params, principal)
}

// UsersServicePatchUserHandler interface for that can handle valid users service patch user params
type UsersServicePatchUserHandler interface {
	Handle(UsersServicePatchUserParams, *jwt.MapClaims) middleware.Responder
}

// NewUsersServicePatchUser creates a new http.Handler for the users service patch user operation
func NewUsersServicePatchUser(ctx *middleware.Context, handler UsersServicePatchUserHandler) *UsersServicePatchUser {
	return &UsersServicePatchUser{Context: ctx, Handler: handler}
}

/*
	UsersServicePatchUser swagger:route PATCH /api/v1/users/{id} Users usersServicePatchUser

# Update included properties for user by Id

Update included properties for user by Id
*/
type UsersServicePatchUser struct {
	Context *middleware.Context
	Handler UsersServicePatchUserHandler
}

func (o *UsersServicePatchUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUsersServicePatchUserParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *jwt.MapClaims
	if uprinc != nil {
		principal = uprinc.(*jwt.MapClaims) // this is really a jwt.MapClaims, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
