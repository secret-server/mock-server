// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUsersServiceLookupParams creates a new UsersServiceLookupParams object
//
// There are no default values defined in the spec.
func NewUsersServiceLookupParams() UsersServiceLookupParams {

	return UsersServiceLookupParams{}
}

// UsersServiceLookupParams contains all the bound params for the users service lookup operation
// typically these are obtained from a http.Request
//
// swagger:parameters UsersService_Lookup
type UsersServiceLookupParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*If not null, filters users by Active Directory domain.
	  In: query
	*/
	FilterDomainID *int32
	/*When set all subscribers not subscribed directly to this inbox notification rule will be excluded.
	  In: query
	*/
	FilterExcludeInboxRuleIDSubscribers *int32
	/*Whether to include inactive users in the results.
	  In: query
	*/
	FilterIncludeInactive *bool
	/*User fields to search.
	  In: query
	  Collection Format: multi
	*/
	FilterSearchFields []string
	/*The text to match in the username, display name, or email address.
	  In: query
	*/
	FilterSearchText *string
	/*User Ids to search.
	  In: query
	  Collection Format: multi
	*/
	FilterUserIds []int64
	/*Number of records to skip before taking results
	  In: query
	*/
	Skip *int32
	/*Sort direction
	  In: query
	*/
	SortBy0Direction *string
	/*Sort field name
	  In: query
	*/
	SortBy0Name *string
	/*Priority index. Sorts with lower values are executed earlier
	  In: query
	*/
	SortBy0Priority *int32
	/*Maximum number of records to include in results
	  In: query
	*/
	Take *int32
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUsersServiceLookupParams() beforehand.
func (o *UsersServiceLookupParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFilterDomainID, qhkFilterDomainID, _ := qs.GetOK("filter.domainId")
	if err := o.bindFilterDomainID(qFilterDomainID, qhkFilterDomainID, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterExcludeInboxRuleIDSubscribers, qhkFilterExcludeInboxRuleIDSubscribers, _ := qs.GetOK("filter.excludeInboxRuleIdSubscribers")
	if err := o.bindFilterExcludeInboxRuleIDSubscribers(qFilterExcludeInboxRuleIDSubscribers, qhkFilterExcludeInboxRuleIDSubscribers, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterIncludeInactive, qhkFilterIncludeInactive, _ := qs.GetOK("filter.includeInactive")
	if err := o.bindFilterIncludeInactive(qFilterIncludeInactive, qhkFilterIncludeInactive, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterSearchFields, qhkFilterSearchFields, _ := qs.GetOK("filter.searchFields")
	if err := o.bindFilterSearchFields(qFilterSearchFields, qhkFilterSearchFields, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterSearchText, qhkFilterSearchText, _ := qs.GetOK("filter.searchText")
	if err := o.bindFilterSearchText(qFilterSearchText, qhkFilterSearchText, route.Formats); err != nil {
		res = append(res, err)
	}

	qFilterUserIds, qhkFilterUserIds, _ := qs.GetOK("filter.userIds")
	if err := o.bindFilterUserIds(qFilterUserIds, qhkFilterUserIds, route.Formats); err != nil {
		res = append(res, err)
	}

	qSkip, qhkSkip, _ := qs.GetOK("skip")
	if err := o.bindSkip(qSkip, qhkSkip, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy0Direction, qhkSortBy0Direction, _ := qs.GetOK("sortBy[0].direction")
	if err := o.bindSortBy0Direction(qSortBy0Direction, qhkSortBy0Direction, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy0Name, qhkSortBy0Name, _ := qs.GetOK("sortBy[0].name")
	if err := o.bindSortBy0Name(qSortBy0Name, qhkSortBy0Name, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy0Priority, qhkSortBy0Priority, _ := qs.GetOK("sortBy[0].priority")
	if err := o.bindSortBy0Priority(qSortBy0Priority, qhkSortBy0Priority, route.Formats); err != nil {
		res = append(res, err)
	}

	qTake, qhkTake, _ := qs.GetOK("take")
	if err := o.bindTake(qTake, qhkTake, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFilterDomainID binds and validates parameter FilterDomainID from query.
func (o *UsersServiceLookupParams) bindFilterDomainID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("filter.domainId", "query", "int32", raw)
	}
	o.FilterDomainID = &value

	return nil
}

// bindFilterExcludeInboxRuleIDSubscribers binds and validates parameter FilterExcludeInboxRuleIDSubscribers from query.
func (o *UsersServiceLookupParams) bindFilterExcludeInboxRuleIDSubscribers(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("filter.excludeInboxRuleIdSubscribers", "query", "int32", raw)
	}
	o.FilterExcludeInboxRuleIDSubscribers = &value

	return nil
}

// bindFilterIncludeInactive binds and validates parameter FilterIncludeInactive from query.
func (o *UsersServiceLookupParams) bindFilterIncludeInactive(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("filter.includeInactive", "query", "bool", raw)
	}
	o.FilterIncludeInactive = &value

	return nil
}

// bindFilterSearchFields binds and validates array parameter FilterSearchFields from query.
//
// Arrays are parsed according to CollectionFormat: "multi" (defaults to "csv" when empty).
func (o *UsersServiceLookupParams) bindFilterSearchFields(rawData []string, hasKey bool, formats strfmt.Registry) error {
	// CollectionFormat: multi
	filterSearchFieldsIC := rawData
	if len(filterSearchFieldsIC) == 0 {
		return nil
	}

	var filterSearchFieldsIR []string
	for _, filterSearchFieldsIV := range filterSearchFieldsIC {
		filterSearchFieldsI := filterSearchFieldsIV

		filterSearchFieldsIR = append(filterSearchFieldsIR, filterSearchFieldsI)
	}

	o.FilterSearchFields = filterSearchFieldsIR

	return nil
}

// bindFilterSearchText binds and validates parameter FilterSearchText from query.
func (o *UsersServiceLookupParams) bindFilterSearchText(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.FilterSearchText = &raw

	return nil
}

// bindFilterUserIds binds and validates array parameter FilterUserIds from query.
//
// Arrays are parsed according to CollectionFormat: "multi" (defaults to "csv" when empty).
func (o *UsersServiceLookupParams) bindFilterUserIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	// CollectionFormat: multi
	filterUserIdsIC := rawData
	if len(filterUserIdsIC) == 0 {
		return nil
	}

	var filterUserIdsIR []int64
	for i, filterUserIdsIV := range filterUserIdsIC {
		filterUserIdsI, err := swag.ConvertInt64(filterUserIdsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "filter.userIds", i), "query", "int64", filterUserIdsI)
		}

		filterUserIdsIR = append(filterUserIdsIR, filterUserIdsI)
	}

	o.FilterUserIds = filterUserIdsIR

	return nil
}

// bindSkip binds and validates parameter Skip from query.
func (o *UsersServiceLookupParams) bindSkip(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("skip", "query", "int32", raw)
	}
	o.Skip = &value

	return nil
}

// bindSortBy0Direction binds and validates parameter SortBy0Direction from query.
func (o *UsersServiceLookupParams) bindSortBy0Direction(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SortBy0Direction = &raw

	return nil
}

// bindSortBy0Name binds and validates parameter SortBy0Name from query.
func (o *UsersServiceLookupParams) bindSortBy0Name(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SortBy0Name = &raw

	return nil
}

// bindSortBy0Priority binds and validates parameter SortBy0Priority from query.
func (o *UsersServiceLookupParams) bindSortBy0Priority(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("sortBy[0].priority", "query", "int32", raw)
	}
	o.SortBy0Priority = &value

	return nil
}

// bindTake binds and validates parameter Take from query.
func (o *UsersServiceLookupParams) bindTake(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("take", "query", "int32", raw)
	}
	o.Take = &value

	return nil
}
