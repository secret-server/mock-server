// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
    "net/http"

    "github.com/go-openapi/errors"
    "github.com/go-openapi/runtime"
    "github.com/go-openapi/runtime/middleware"
    "github.com/go-openapi/validate"

    "github.com/secret-server/mock-server/models"
)

// NewSecretsServiceGetSecretExtendedSearchDetailsParams creates a new SecretsServiceGetSecretExtendedSearchDetailsParams object
//
// There are no default values defined in the spec.
func NewSecretsServiceGetSecretExtendedSearchDetailsParams() SecretsServiceGetSecretExtendedSearchDetailsParams {

    return SecretsServiceGetSecretExtendedSearchDetailsParams{}
}

// SecretsServiceGetSecretExtendedSearchDetailsParams contains all the bound params for the secrets service get secret extended search details operation
// typically these are obtained from a http.Request
//
// swagger:parameters SecretsService_GetSecretExtendedSearchDetails
type SecretsServiceGetSecretExtendedSearchDetailsParams struct {

    // HTTP Request Object
    HTTPRequest *http.Request `json:"-"`

    /*args
      In: body
    */
    Args *models.SecretSearchExtendedArgs
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSecretsServiceGetSecretExtendedSearchDetailsParams() beforehand.
func (o *SecretsServiceGetSecretExtendedSearchDetailsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
    var res []error

    o.HTTPRequest = r

    if runtime.HasBody(r) {
        defer r.Body.Close()
        var body models.SecretSearchExtendedArgs
        if err := route.Consumer.Consume(r.Body, &body); err != nil {
            res = append(res, errors.NewParseError("args", "body", "", err))
        } else {
            // validate body object
            if err := body.Validate(route.Formats); err != nil {
                res = append(res, err)
            }

            ctx := validate.WithOperationRequest(r.Context())
            if err := body.ContextValidate(ctx, route.Formats); err != nil {
                res = append(res, err)
            }

            if len(res) == 0 {
                o.Args = &body
            }
        }
    }
    if len(res) > 0 {
        return errors.CompositeValidationError(res...)
    }
    return nil
}
