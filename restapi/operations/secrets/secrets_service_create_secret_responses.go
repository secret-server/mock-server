// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/secret-server/mock-server/models"
)

// SecretsServiceCreateSecretOKCode is the HTTP code returned for type SecretsServiceCreateSecretOK
const SecretsServiceCreateSecretOKCode int = 200

/*
SecretsServiceCreateSecretOK Secret object

swagger:response secretsServiceCreateSecretOK
*/
type SecretsServiceCreateSecretOK struct {

	/*
	  In: Body
	*/
	Payload *models.SecretModel `json:"body,omitempty"`
}

// NewSecretsServiceCreateSecretOK creates SecretsServiceCreateSecretOK with default headers values
func NewSecretsServiceCreateSecretOK() *SecretsServiceCreateSecretOK {

	return &SecretsServiceCreateSecretOK{}
}

// WithPayload adds the payload to the secrets service create secret o k response
func (o *SecretsServiceCreateSecretOK) WithPayload(payload *models.SecretModel) *SecretsServiceCreateSecretOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the secrets service create secret o k response
func (o *SecretsServiceCreateSecretOK) SetPayload(payload *models.SecretModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SecretsServiceCreateSecretOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SecretsServiceCreateSecretBadRequestCode is the HTTP code returned for type SecretsServiceCreateSecretBadRequest
const SecretsServiceCreateSecretBadRequestCode int = 400

/*
SecretsServiceCreateSecretBadRequest Bad request

swagger:response secretsServiceCreateSecretBadRequest
*/
type SecretsServiceCreateSecretBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.BadRequestResponse `json:"body,omitempty"`
}

// NewSecretsServiceCreateSecretBadRequest creates SecretsServiceCreateSecretBadRequest with default headers values
func NewSecretsServiceCreateSecretBadRequest() *SecretsServiceCreateSecretBadRequest {

	return &SecretsServiceCreateSecretBadRequest{}
}

// WithPayload adds the payload to the secrets service create secret bad request response
func (o *SecretsServiceCreateSecretBadRequest) WithPayload(payload *models.BadRequestResponse) *SecretsServiceCreateSecretBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the secrets service create secret bad request response
func (o *SecretsServiceCreateSecretBadRequest) SetPayload(payload *models.BadRequestResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SecretsServiceCreateSecretBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SecretsServiceCreateSecretForbiddenCode is the HTTP code returned for type SecretsServiceCreateSecretForbidden
const SecretsServiceCreateSecretForbiddenCode int = 403

/*
SecretsServiceCreateSecretForbidden Authentication failed

swagger:response secretsServiceCreateSecretForbidden
*/
type SecretsServiceCreateSecretForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.AuthenticationFailedResponse `json:"body,omitempty"`
}

// NewSecretsServiceCreateSecretForbidden creates SecretsServiceCreateSecretForbidden with default headers values
func NewSecretsServiceCreateSecretForbidden() *SecretsServiceCreateSecretForbidden {

	return &SecretsServiceCreateSecretForbidden{}
}

// WithPayload adds the payload to the secrets service create secret forbidden response
func (o *SecretsServiceCreateSecretForbidden) WithPayload(payload *models.AuthenticationFailedResponse) *SecretsServiceCreateSecretForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the secrets service create secret forbidden response
func (o *SecretsServiceCreateSecretForbidden) SetPayload(payload *models.AuthenticationFailedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SecretsServiceCreateSecretForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SecretsServiceCreateSecretInternalServerErrorCode is the HTTP code returned for type SecretsServiceCreateSecretInternalServerError
const SecretsServiceCreateSecretInternalServerErrorCode int = 500

/*
SecretsServiceCreateSecretInternalServerError Internal server error

swagger:response secretsServiceCreateSecretInternalServerError
*/
type SecretsServiceCreateSecretInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.InternalServerErrorResponse `json:"body,omitempty"`
}

// NewSecretsServiceCreateSecretInternalServerError creates SecretsServiceCreateSecretInternalServerError with default headers values
func NewSecretsServiceCreateSecretInternalServerError() *SecretsServiceCreateSecretInternalServerError {

	return &SecretsServiceCreateSecretInternalServerError{}
}

// WithPayload adds the payload to the secrets service create secret internal server error response
func (o *SecretsServiceCreateSecretInternalServerError) WithPayload(payload *models.InternalServerErrorResponse) *SecretsServiceCreateSecretInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the secrets service create secret internal server error response
func (o *SecretsServiceCreateSecretInternalServerError) SetPayload(payload *models.InternalServerErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SecretsServiceCreateSecretInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
