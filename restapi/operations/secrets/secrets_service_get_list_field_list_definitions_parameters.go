// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSecretsServiceGetListFieldListDefinitionsParams creates a new SecretsServiceGetListFieldListDefinitionsParams object
//
// There are no default values defined in the spec.
func NewSecretsServiceGetListFieldListDefinitionsParams() SecretsServiceGetListFieldListDefinitionsParams {

	return SecretsServiceGetListFieldListDefinitionsParams{}
}

// SecretsServiceGetListFieldListDefinitionsParams contains all the bound params for the secrets service get list field list definitions operation
// typically these are obtained from a http.Request
//
// swagger:parameters SecretsService_GetListFieldListDefinitions
type SecretsServiceGetListFieldListDefinitionsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Automatically check in a secret after finding or updating.
	  In: query
	*/
	AutoCheckIn *bool
	/*Automatically check out secret before finding or updating.
	  In: query
	*/
	AutoCheckout *bool
	/*Leave a comment when checking in or out.
	  In: query
	*/
	AutoComment *string
	/*If secret is checked out, then force a check in.
	  In: query
	*/
	ForceCheckIn *bool
	/*Secret ID
	  Required: true
	  In: path
	*/
	ID int32
	/*Number of records to skip before taking results
	  In: query
	*/
	Skip *int32
	/*The field slug name of the list field. This is the fieldSlugName property of the SecretField object. By default, it is the lower-case field name with all spaces replaced with dashes (-).
	  Required: true
	  In: path
	*/
	Slug string
	/*Sort direction
	  In: query
	*/
	SortBy0Direction *string
	/*Sort field name
	  In: query
	*/
	SortBy0Name *string
	/*Priority index. Sorts with lower values are executed earlier
	  In: query
	*/
	SortBy0Priority *int32
	/*Maximum number of records to include in results
	  In: query
	*/
	Take *int32
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSecretsServiceGetListFieldListDefinitionsParams() beforehand.
func (o *SecretsServiceGetListFieldListDefinitionsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAutoCheckIn, qhkAutoCheckIn, _ := qs.GetOK("autoCheckIn")
	if err := o.bindAutoCheckIn(qAutoCheckIn, qhkAutoCheckIn, route.Formats); err != nil {
		res = append(res, err)
	}

	qAutoCheckout, qhkAutoCheckout, _ := qs.GetOK("autoCheckout")
	if err := o.bindAutoCheckout(qAutoCheckout, qhkAutoCheckout, route.Formats); err != nil {
		res = append(res, err)
	}

	qAutoComment, qhkAutoComment, _ := qs.GetOK("autoComment")
	if err := o.bindAutoComment(qAutoComment, qhkAutoComment, route.Formats); err != nil {
		res = append(res, err)
	}

	qForceCheckIn, qhkForceCheckIn, _ := qs.GetOK("forceCheckIn")
	if err := o.bindForceCheckIn(qForceCheckIn, qhkForceCheckIn, route.Formats); err != nil {
		res = append(res, err)
	}

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSkip, qhkSkip, _ := qs.GetOK("skip")
	if err := o.bindSkip(qSkip, qhkSkip, route.Formats); err != nil {
		res = append(res, err)
	}

	rSlug, rhkSlug, _ := route.Params.GetOK("slug")
	if err := o.bindSlug(rSlug, rhkSlug, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy0Direction, qhkSortBy0Direction, _ := qs.GetOK("sortBy[0].direction")
	if err := o.bindSortBy0Direction(qSortBy0Direction, qhkSortBy0Direction, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy0Name, qhkSortBy0Name, _ := qs.GetOK("sortBy[0].name")
	if err := o.bindSortBy0Name(qSortBy0Name, qhkSortBy0Name, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortBy0Priority, qhkSortBy0Priority, _ := qs.GetOK("sortBy[0].priority")
	if err := o.bindSortBy0Priority(qSortBy0Priority, qhkSortBy0Priority, route.Formats); err != nil {
		res = append(res, err)
	}

	qTake, qhkTake, _ := qs.GetOK("take")
	if err := o.bindTake(qTake, qhkTake, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAutoCheckIn binds and validates parameter AutoCheckIn from query.
func (o *SecretsServiceGetListFieldListDefinitionsParams) bindAutoCheckIn(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("autoCheckIn", "query", "bool", raw)
	}
	o.AutoCheckIn = &value

	return nil
}

// bindAutoCheckout binds and validates parameter AutoCheckout from query.
func (o *SecretsServiceGetListFieldListDefinitionsParams) bindAutoCheckout(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("autoCheckout", "query", "bool", raw)
	}
	o.AutoCheckout = &value

	return nil
}

// bindAutoComment binds and validates parameter AutoComment from query.
func (o *SecretsServiceGetListFieldListDefinitionsParams) bindAutoComment(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.AutoComment = &raw

	return nil
}

// bindForceCheckIn binds and validates parameter ForceCheckIn from query.
func (o *SecretsServiceGetListFieldListDefinitionsParams) bindForceCheckIn(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("forceCheckIn", "query", "bool", raw)
	}
	o.ForceCheckIn = &value

	return nil
}

// bindID binds and validates parameter ID from path.
func (o *SecretsServiceGetListFieldListDefinitionsParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("id", "path", "int32", raw)
	}
	o.ID = value

	return nil
}

// bindSkip binds and validates parameter Skip from query.
func (o *SecretsServiceGetListFieldListDefinitionsParams) bindSkip(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("skip", "query", "int32", raw)
	}
	o.Skip = &value

	return nil
}

// bindSlug binds and validates parameter Slug from path.
func (o *SecretsServiceGetListFieldListDefinitionsParams) bindSlug(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Slug = raw

	return nil
}

// bindSortBy0Direction binds and validates parameter SortBy0Direction from query.
func (o *SecretsServiceGetListFieldListDefinitionsParams) bindSortBy0Direction(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SortBy0Direction = &raw

	return nil
}

// bindSortBy0Name binds and validates parameter SortBy0Name from query.
func (o *SecretsServiceGetListFieldListDefinitionsParams) bindSortBy0Name(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SortBy0Name = &raw

	return nil
}

// bindSortBy0Priority binds and validates parameter SortBy0Priority from query.
func (o *SecretsServiceGetListFieldListDefinitionsParams) bindSortBy0Priority(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("sortBy[0].priority", "query", "int32", raw)
	}
	o.SortBy0Priority = &value

	return nil
}

// bindTake binds and validates parameter Take from query.
func (o *SecretsServiceGetListFieldListDefinitionsParams) bindTake(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("take", "query", "int32", raw)
	}
	o.Take = &value

	return nil
}
