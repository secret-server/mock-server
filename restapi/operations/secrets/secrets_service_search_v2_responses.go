// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
    "net/http"

    "github.com/go-openapi/runtime"

    "github.com/secret-server/mock-server/models"
)

// SecretsServiceSearchV2OKCode is the HTTP code returned for type SecretsServiceSearchV2OK
const SecretsServiceSearchV2OKCode int = 200

/*
SecretsServiceSearchV2OK Secret search result object

swagger:response secretsServiceSearchV2OK
*/
type SecretsServiceSearchV2OK struct {

    /*
      In: Body
    */
    Payload *models.PagingOfSecretSummary `json:"body,omitempty"`
}

// NewSecretsServiceSearchV2OK creates SecretsServiceSearchV2OK with default headers values
func NewSecretsServiceSearchV2OK() *SecretsServiceSearchV2OK {

    return &SecretsServiceSearchV2OK{}
}

// WithPayload adds the payload to the secrets service search v2 o k response
func (o *SecretsServiceSearchV2OK) WithPayload(payload *models.PagingOfSecretSummary) *SecretsServiceSearchV2OK {
    o.Payload = payload
    return o
}

// SetPayload sets the payload to the secrets service search v2 o k response
func (o *SecretsServiceSearchV2OK) SetPayload(payload *models.PagingOfSecretSummary) {
    o.Payload = payload
}

// WriteResponse to the client
func (o *SecretsServiceSearchV2OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

    rw.WriteHeader(200)
    if o.Payload != nil {
        payload := o.Payload
        if err := producer.Produce(rw, payload); err != nil {
            panic(err) // let the recovery middleware deal with this
        }
    }
}

// SecretsServiceSearchV2BadRequestCode is the HTTP code returned for type SecretsServiceSearchV2BadRequest
const SecretsServiceSearchV2BadRequestCode int = 400

/*
SecretsServiceSearchV2BadRequest Bad request

swagger:response secretsServiceSearchV2BadRequest
*/
type SecretsServiceSearchV2BadRequest struct {

    /*
      In: Body
    */
    Payload *models.BadRequestResponse `json:"body,omitempty"`
}

// NewSecretsServiceSearchV2BadRequest creates SecretsServiceSearchV2BadRequest with default headers values
func NewSecretsServiceSearchV2BadRequest() *SecretsServiceSearchV2BadRequest {

    return &SecretsServiceSearchV2BadRequest{}
}

// WithPayload adds the payload to the secrets service search v2 bad request response
func (o *SecretsServiceSearchV2BadRequest) WithPayload(payload *models.BadRequestResponse) *SecretsServiceSearchV2BadRequest {
    o.Payload = payload
    return o
}

// SetPayload sets the payload to the secrets service search v2 bad request response
func (o *SecretsServiceSearchV2BadRequest) SetPayload(payload *models.BadRequestResponse) {
    o.Payload = payload
}

// WriteResponse to the client
func (o *SecretsServiceSearchV2BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

    rw.WriteHeader(400)
    if o.Payload != nil {
        payload := o.Payload
        if err := producer.Produce(rw, payload); err != nil {
            panic(err) // let the recovery middleware deal with this
        }
    }
}

// SecretsServiceSearchV2ForbiddenCode is the HTTP code returned for type SecretsServiceSearchV2Forbidden
const SecretsServiceSearchV2ForbiddenCode int = 403

/*
SecretsServiceSearchV2Forbidden Authentication failed

swagger:response secretsServiceSearchV2Forbidden
*/
type SecretsServiceSearchV2Forbidden struct {

    /*
      In: Body
    */
    Payload *models.AuthenticationFailedResponse `json:"body,omitempty"`
}

// NewSecretsServiceSearchV2Forbidden creates SecretsServiceSearchV2Forbidden with default headers values
func NewSecretsServiceSearchV2Forbidden() *SecretsServiceSearchV2Forbidden {

    return &SecretsServiceSearchV2Forbidden{}
}

// WithPayload adds the payload to the secrets service search v2 forbidden response
func (o *SecretsServiceSearchV2Forbidden) WithPayload(payload *models.AuthenticationFailedResponse) *SecretsServiceSearchV2Forbidden {
    o.Payload = payload
    return o
}

// SetPayload sets the payload to the secrets service search v2 forbidden response
func (o *SecretsServiceSearchV2Forbidden) SetPayload(payload *models.AuthenticationFailedResponse) {
    o.Payload = payload
}

// WriteResponse to the client
func (o *SecretsServiceSearchV2Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

    rw.WriteHeader(403)
    if o.Payload != nil {
        payload := o.Payload
        if err := producer.Produce(rw, payload); err != nil {
            panic(err) // let the recovery middleware deal with this
        }
    }
}

// SecretsServiceSearchV2InternalServerErrorCode is the HTTP code returned for type SecretsServiceSearchV2InternalServerError
const SecretsServiceSearchV2InternalServerErrorCode int = 500

/*
SecretsServiceSearchV2InternalServerError Internal server error

swagger:response secretsServiceSearchV2InternalServerError
*/
type SecretsServiceSearchV2InternalServerError struct {

    /*
      In: Body
    */
    Payload *models.InternalServerErrorResponse `json:"body,omitempty"`
}

// NewSecretsServiceSearchV2InternalServerError creates SecretsServiceSearchV2InternalServerError with default headers values
func NewSecretsServiceSearchV2InternalServerError() *SecretsServiceSearchV2InternalServerError {

    return &SecretsServiceSearchV2InternalServerError{}
}

// WithPayload adds the payload to the secrets service search v2 internal server error response
func (o *SecretsServiceSearchV2InternalServerError) WithPayload(payload *models.InternalServerErrorResponse) *SecretsServiceSearchV2InternalServerError {
    o.Payload = payload
    return o
}

// SetPayload sets the payload to the secrets service search v2 internal server error response
func (o *SecretsServiceSearchV2InternalServerError) SetPayload(payload *models.InternalServerErrorResponse) {
    o.Payload = payload
}

// WriteResponse to the client
func (o *SecretsServiceSearchV2InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

    rw.WriteHeader(500)
    if o.Payload != nil {
        payload := o.Payload
        if err := producer.Produce(rw, payload); err != nil {
            panic(err) // let the recovery middleware deal with this
        }
    }
}
