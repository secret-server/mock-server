// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
    "net/http"

    "github.com/go-openapi/runtime/middleware"

    "github.com/golang-jwt/jwt"
)

// SecretsServiceCreateSecretHandlerFunc turns a function with the right signature into a secrets service create secret handler
type SecretsServiceCreateSecretHandlerFunc func(SecretsServiceCreateSecretParams, *jwt.MapClaims) middleware.Responder

// Handle executing the request and returning a response
func (fn SecretsServiceCreateSecretHandlerFunc) Handle(params SecretsServiceCreateSecretParams, principal *jwt.MapClaims) middleware.Responder {
    return fn(params, principal)
}

// SecretsServiceCreateSecretHandler interface for that can handle valid secrets service create secret params
type SecretsServiceCreateSecretHandler interface {
    Handle(SecretsServiceCreateSecretParams, *jwt.MapClaims) middleware.Responder
}

// NewSecretsServiceCreateSecret creates a new http.Handler for the secrets service create secret operation
func NewSecretsServiceCreateSecret(ctx *middleware.Context, handler SecretsServiceCreateSecretHandler) *SecretsServiceCreateSecret {
    return &SecretsServiceCreateSecret{Context: ctx, Handler: handler}
}

/*
    SecretsServiceCreateSecret swagger:route POST /api/v1/secrets Secrets secretsServiceCreateSecret

# Create Secret

Create a new secret
*/
type SecretsServiceCreateSecret struct {
    Context *middleware.Context
    Handler SecretsServiceCreateSecretHandler
}

func (o *SecretsServiceCreateSecret) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
    route, rCtx, _ := o.Context.RouteInfo(r)
    if rCtx != nil {
        *r = *rCtx
    }
    var Params = NewSecretsServiceCreateSecretParams()
    uprinc, aCtx, err := o.Context.Authorize(r, route)
    if err != nil {
        o.Context.Respond(rw, r, route.Produces, route, err)
        return
    }
    if aCtx != nil {
        *r = *aCtx
    }
    var principal *jwt.MapClaims
    if uprinc != nil {
        principal = uprinc.(*jwt.MapClaims) // this is really a jwt.MapClaims, I promise
    }

    if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
        o.Context.Respond(rw, r, route.Produces, route, err)
        return
    }

    res := o.Handler.Handle(Params, principal) // actually handle the request
    o.Context.Respond(rw, r, route.Produces, route, res)

}
