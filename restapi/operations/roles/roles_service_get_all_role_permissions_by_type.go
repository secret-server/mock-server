// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/golang-jwt/jwt"
)

// RolesServiceGetAllRolePermissionsByTypeHandlerFunc turns a function with the right signature into a roles service get all role permissions by type handler
type RolesServiceGetAllRolePermissionsByTypeHandlerFunc func(RolesServiceGetAllRolePermissionsByTypeParams, *jwt.MapClaims) middleware.Responder

// Handle executing the request and returning a response
func (fn RolesServiceGetAllRolePermissionsByTypeHandlerFunc) Handle(params RolesServiceGetAllRolePermissionsByTypeParams, principal *jwt.MapClaims) middleware.Responder {
	return fn(params, principal)
}

// RolesServiceGetAllRolePermissionsByTypeHandler interface for that can handle valid roles service get all role permissions by type params
type RolesServiceGetAllRolePermissionsByTypeHandler interface {
	Handle(RolesServiceGetAllRolePermissionsByTypeParams, *jwt.MapClaims) middleware.Responder
}

// NewRolesServiceGetAllRolePermissionsByType creates a new http.Handler for the roles service get all role permissions by type operation
func NewRolesServiceGetAllRolePermissionsByType(ctx *middleware.Context, handler RolesServiceGetAllRolePermissionsByTypeHandler) *RolesServiceGetAllRolePermissionsByType {
	return &RolesServiceGetAllRolePermissionsByType{Context: ctx, Handler: handler}
}

/*
	RolesServiceGetAllRolePermissionsByType swagger:route GET /api/v1/roles/{id}/permissions/unassigned Roles rolesServiceGetAllRolePermissionsByType

# Get Unassigned Role Permissions

Get unassigned Role Permissions matching the type of a specific Role by Role ID
*/
type RolesServiceGetAllRolePermissionsByType struct {
	Context *middleware.Context
	Handler RolesServiceGetAllRolePermissionsByTypeHandler
}

func (o *RolesServiceGetAllRolePermissionsByType) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRolesServiceGetAllRolePermissionsByTypeParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *jwt.MapClaims
	if uprinc != nil {
		principal = uprinc.(*jwt.MapClaims) // this is really a jwt.MapClaims, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
