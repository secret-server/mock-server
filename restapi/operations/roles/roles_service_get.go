// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/golang-jwt/jwt"
)

// RolesServiceGetHandlerFunc turns a function with the right signature into a roles service get handler
type RolesServiceGetHandlerFunc func(RolesServiceGetParams, *jwt.MapClaims) middleware.Responder

// Handle executing the request and returning a response
func (fn RolesServiceGetHandlerFunc) Handle(params RolesServiceGetParams, principal *jwt.MapClaims) middleware.Responder {
	return fn(params, principal)
}

// RolesServiceGetHandler interface for that can handle valid roles service get params
type RolesServiceGetHandler interface {
	Handle(RolesServiceGetParams, *jwt.MapClaims) middleware.Responder
}

// NewRolesServiceGet creates a new http.Handler for the roles service get operation
func NewRolesServiceGet(ctx *middleware.Context, handler RolesServiceGetHandler) *RolesServiceGet {
	return &RolesServiceGet{Context: ctx, Handler: handler}
}

/*
	RolesServiceGet swagger:route GET /api/v1/roles/{id} Roles rolesServiceGet

# Get Role

Get Role by Role ID
*/
type RolesServiceGet struct {
	Context *middleware.Context
	Handler RolesServiceGetHandler
}

func (o *RolesServiceGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRolesServiceGetParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *jwt.MapClaims
	if uprinc != nil {
		principal = uprinc.(*jwt.MapClaims) // this is really a jwt.MapClaims, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
