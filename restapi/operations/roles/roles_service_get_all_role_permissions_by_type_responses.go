// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/secret-server/mock-server/models"
)

// RolesServiceGetAllRolePermissionsByTypeOKCode is the HTTP code returned for type RolesServiceGetAllRolePermissionsByTypeOK
const RolesServiceGetAllRolePermissionsByTypeOKCode int = 200

/*
RolesServiceGetAllRolePermissionsByTypeOK Role model result object

swagger:response rolesServiceGetAllRolePermissionsByTypeOK
*/
type RolesServiceGetAllRolePermissionsByTypeOK struct {

	/*
	  In: Body
	*/
	Payload *models.PagingOfRolePermissionModel `json:"body,omitempty"`
}

// NewRolesServiceGetAllRolePermissionsByTypeOK creates RolesServiceGetAllRolePermissionsByTypeOK with default headers values
func NewRolesServiceGetAllRolePermissionsByTypeOK() *RolesServiceGetAllRolePermissionsByTypeOK {

	return &RolesServiceGetAllRolePermissionsByTypeOK{}
}

// WithPayload adds the payload to the roles service get all role permissions by type o k response
func (o *RolesServiceGetAllRolePermissionsByTypeOK) WithPayload(payload *models.PagingOfRolePermissionModel) *RolesServiceGetAllRolePermissionsByTypeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the roles service get all role permissions by type o k response
func (o *RolesServiceGetAllRolePermissionsByTypeOK) SetPayload(payload *models.PagingOfRolePermissionModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RolesServiceGetAllRolePermissionsByTypeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RolesServiceGetAllRolePermissionsByTypeBadRequestCode is the HTTP code returned for type RolesServiceGetAllRolePermissionsByTypeBadRequest
const RolesServiceGetAllRolePermissionsByTypeBadRequestCode int = 400

/*
RolesServiceGetAllRolePermissionsByTypeBadRequest Bad request

swagger:response rolesServiceGetAllRolePermissionsByTypeBadRequest
*/
type RolesServiceGetAllRolePermissionsByTypeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.BadRequestResponse `json:"body,omitempty"`
}

// NewRolesServiceGetAllRolePermissionsByTypeBadRequest creates RolesServiceGetAllRolePermissionsByTypeBadRequest with default headers values
func NewRolesServiceGetAllRolePermissionsByTypeBadRequest() *RolesServiceGetAllRolePermissionsByTypeBadRequest {

	return &RolesServiceGetAllRolePermissionsByTypeBadRequest{}
}

// WithPayload adds the payload to the roles service get all role permissions by type bad request response
func (o *RolesServiceGetAllRolePermissionsByTypeBadRequest) WithPayload(payload *models.BadRequestResponse) *RolesServiceGetAllRolePermissionsByTypeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the roles service get all role permissions by type bad request response
func (o *RolesServiceGetAllRolePermissionsByTypeBadRequest) SetPayload(payload *models.BadRequestResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RolesServiceGetAllRolePermissionsByTypeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RolesServiceGetAllRolePermissionsByTypeForbiddenCode is the HTTP code returned for type RolesServiceGetAllRolePermissionsByTypeForbidden
const RolesServiceGetAllRolePermissionsByTypeForbiddenCode int = 403

/*
RolesServiceGetAllRolePermissionsByTypeForbidden Authentication failed

swagger:response rolesServiceGetAllRolePermissionsByTypeForbidden
*/
type RolesServiceGetAllRolePermissionsByTypeForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.AuthenticationFailedResponse `json:"body,omitempty"`
}

// NewRolesServiceGetAllRolePermissionsByTypeForbidden creates RolesServiceGetAllRolePermissionsByTypeForbidden with default headers values
func NewRolesServiceGetAllRolePermissionsByTypeForbidden() *RolesServiceGetAllRolePermissionsByTypeForbidden {

	return &RolesServiceGetAllRolePermissionsByTypeForbidden{}
}

// WithPayload adds the payload to the roles service get all role permissions by type forbidden response
func (o *RolesServiceGetAllRolePermissionsByTypeForbidden) WithPayload(payload *models.AuthenticationFailedResponse) *RolesServiceGetAllRolePermissionsByTypeForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the roles service get all role permissions by type forbidden response
func (o *RolesServiceGetAllRolePermissionsByTypeForbidden) SetPayload(payload *models.AuthenticationFailedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RolesServiceGetAllRolePermissionsByTypeForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RolesServiceGetAllRolePermissionsByTypeInternalServerErrorCode is the HTTP code returned for type RolesServiceGetAllRolePermissionsByTypeInternalServerError
const RolesServiceGetAllRolePermissionsByTypeInternalServerErrorCode int = 500

/*
RolesServiceGetAllRolePermissionsByTypeInternalServerError Internal server error

swagger:response rolesServiceGetAllRolePermissionsByTypeInternalServerError
*/
type RolesServiceGetAllRolePermissionsByTypeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.InternalServerErrorResponse `json:"body,omitempty"`
}

// NewRolesServiceGetAllRolePermissionsByTypeInternalServerError creates RolesServiceGetAllRolePermissionsByTypeInternalServerError with default headers values
func NewRolesServiceGetAllRolePermissionsByTypeInternalServerError() *RolesServiceGetAllRolePermissionsByTypeInternalServerError {

	return &RolesServiceGetAllRolePermissionsByTypeInternalServerError{}
}

// WithPayload adds the payload to the roles service get all role permissions by type internal server error response
func (o *RolesServiceGetAllRolePermissionsByTypeInternalServerError) WithPayload(payload *models.InternalServerErrorResponse) *RolesServiceGetAllRolePermissionsByTypeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the roles service get all role permissions by type internal server error response
func (o *RolesServiceGetAllRolePermissionsByTypeInternalServerError) SetPayload(payload *models.InternalServerErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RolesServiceGetAllRolePermissionsByTypeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
