// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OAuth2ServiceAuthorizeMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var OAuth2ServiceAuthorizeMaxParseMemory int64 = 32 << 20

// NewOAuth2ServiceAuthorizeParams creates a new OAuth2ServiceAuthorizeParams object
//
// There are no default values defined in the spec.
func NewOAuth2ServiceAuthorizeParams() OAuth2ServiceAuthorizeParams {

	return OAuth2ServiceAuthorizeParams{}
}

// OAuth2ServiceAuthorizeParams contains all the bound params for the o auth2 service authorize operation
// typically these are obtained from a http.Request
//
// swagger:parameters OAuth2Service_Authorize
type OAuth2ServiceAuthorizeParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Authentication grant type.  Use 'password' when authenticating, and 'refresh_token' when refreshing a token.
	  Required: true
	  In: formData
	*/
	GrantType string
	/*Secret Server authentication password.  Required when authenticating.
	  In: formData
	*/
	Password *string
	/*The refresh token.  Required when refreshing a token.
	  In: formData
	*/
	RefreshToken *string
	/*Secret Server authentication username.  Required when authenticating.
	  In: formData
	*/
	Username *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewOAuth2ServiceAuthorizeParams() beforehand.
func (o *OAuth2ServiceAuthorizeParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(OAuth2ServiceAuthorizeMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdGrantType, fdhkGrantType, _ := fds.GetOK("grant_type")
	if err := o.bindGrantType(fdGrantType, fdhkGrantType, route.Formats); err != nil {
		res = append(res, err)
	}

	fdPassword, fdhkPassword, _ := fds.GetOK("password")
	if err := o.bindPassword(fdPassword, fdhkPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRefreshToken, fdhkRefreshToken, _ := fds.GetOK("refresh_token")
	if err := o.bindRefreshToken(fdRefreshToken, fdhkRefreshToken, route.Formats); err != nil {
		res = append(res, err)
	}

	fdUsername, fdhkUsername, _ := fds.GetOK("username")
	if err := o.bindUsername(fdUsername, fdhkUsername, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindGrantType binds and validates parameter GrantType from formData.
func (o *OAuth2ServiceAuthorizeParams) bindGrantType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("grant_type", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("grant_type", "formData", raw); err != nil {
		return err
	}
	o.GrantType = raw

	if err := o.validateGrantType(formats); err != nil {
		return err
	}

	return nil
}

// validateGrantType carries on validations for parameter GrantType
func (o *OAuth2ServiceAuthorizeParams) validateGrantType(formats strfmt.Registry) error {

	if err := validate.EnumCase("grant_type", "formData", o.GrantType, []interface{}{"password", "refresh_token"}, true); err != nil {
		return err
	}

	return nil
}

// bindPassword binds and validates parameter Password from formData.
func (o *OAuth2ServiceAuthorizeParams) bindPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Password = &raw

	return nil
}

// bindRefreshToken binds and validates parameter RefreshToken from formData.
func (o *OAuth2ServiceAuthorizeParams) bindRefreshToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.RefreshToken = &raw

	return nil
}

// bindUsername binds and validates parameter Username from formData.
func (o *OAuth2ServiceAuthorizeParams) bindUsername(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Username = &raw

	return nil
}
