// Code generated by go-swagger; DO NOT EDIT.

package authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// OAuth2ServiceAuthorizeHandlerFunc turns a function with the right signature into a o auth2 service authorize handler
type OAuth2ServiceAuthorizeHandlerFunc func(OAuth2ServiceAuthorizeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn OAuth2ServiceAuthorizeHandlerFunc) Handle(params OAuth2ServiceAuthorizeParams) middleware.Responder {
	return fn(params)
}

// OAuth2ServiceAuthorizeHandler interface for that can handle valid o auth2 service authorize params
type OAuth2ServiceAuthorizeHandler interface {
	Handle(OAuth2ServiceAuthorizeParams) middleware.Responder
}

// NewOAuth2ServiceAuthorize creates a new http.Handler for the o auth2 service authorize operation
func NewOAuth2ServiceAuthorize(ctx *middleware.Context, handler OAuth2ServiceAuthorizeHandler) *OAuth2ServiceAuthorize {
	return &OAuth2ServiceAuthorize{Context: ctx, Handler: handler}
}

/*
	OAuth2ServiceAuthorize swagger:route POST /oauth2/token Authentication oAuth2ServiceAuthorize

# Retrieve or Refresh Access Token

Retrieve an access token for use with other API requests or refresh an access token.
*/
type OAuth2ServiceAuthorize struct {
	Context *middleware.Context
	Handler OAuth2ServiceAuthorizeHandler
}

func (o *OAuth2ServiceAuthorize) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewOAuth2ServiceAuthorizeParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
