// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RoleTypes Role Type
//
// swagger:model RoleTypes
type RoleTypes string

func NewRoleTypes(value RoleTypes) *RoleTypes {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RoleTypes.
func (m RoleTypes) Pointer() *RoleTypes {
	return &m
}

const (

	// RoleTypesGlobalRoleType captures enum value "GlobalRoleType"
	RoleTypesGlobalRoleType RoleTypes = "GlobalRoleType"

	// RoleTypesFolderRoleType captures enum value "FolderRoleType"
	RoleTypesFolderRoleType RoleTypes = "FolderRoleType"

	// RoleTypesSecretRoleType captures enum value "SecretRoleType"
	RoleTypesSecretRoleType RoleTypes = "SecretRoleType"

	// RoleTypesSecretTemplateRoleType captures enum value "SecretTemplateRoleType"
	RoleTypesSecretTemplateRoleType RoleTypes = "SecretTemplateRoleType"

	// RoleTypesReportRoleType captures enum value "ReportRoleType"
	RoleTypesReportRoleType RoleTypes = "ReportRoleType"

	// RoleTypesReportCategoryRoleType captures enum value "ReportCategoryRoleType"
	RoleTypesReportCategoryRoleType RoleTypes = "ReportCategoryRoleType"
)

// for schema
var roleTypesEnum []interface{}

func init() {
	var res []RoleTypes
	if err := json.Unmarshal([]byte(`["GlobalRoleType","FolderRoleType","SecretRoleType","SecretTemplateRoleType","ReportRoleType","ReportCategoryRoleType"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleTypesEnum = append(roleTypesEnum, v)
	}
}

func (m RoleTypes) validateRoleTypesEnum(path, location string, value RoleTypes) error {
	if err := validate.EnumCase(path, location, value, roleTypesEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this role types
func (m RoleTypes) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRoleTypesEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this role types based on context it is used
func (m RoleTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
