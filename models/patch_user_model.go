// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PatchUserModel PatchUserModel
//
// swagger:model PatchUserModel
type PatchUserModel struct {

	// DateOptionId
	DateOptionID *UpdateFieldValueOfInt32 `json:"dateOptionId,omitempty"`

	// Display name
	DisplayName *UpdateFieldValueOfString `json:"displayName,omitempty"`

	// Whether Duo two-factor authentication is enabled
	DuoTwoFactor *UpdateFieldValueOfBoolean `json:"duoTwoFactor,omitempty"`

	// Email address
	EmailAddress *UpdateFieldValueOfString `json:"emailAddress,omitempty"`

	// Whether the user account is enabled
	Enabled *UpdateFieldValueOfBoolean `json:"enabled,omitempty"`

	// Whether FIDO2 two-factor authentication is enabled
	Fido2TwoFactor *UpdateFieldValueOfBoolean `json:"fido2TwoFactor,omitempty"`

	// GroupOwners
	GroupOwners []int32 `json:"groupOwners"`

	// User ID. Must match ID in path
	ID int32 `json:"id,omitempty"`

	// List of IP Address Restriction Ids for the user. This will completely replace whatever restrictions existed previously.
	IPAddressRestrictionIds *UpdateFieldValueOfInt32 `json:"ipAddressRestrictionIds,omitempty"`

	// IsApplicationAccount
	IsApplicationAccount *UpdateFieldValueOfBoolean `json:"isApplicationAccount,omitempty"`

	// IsGroupOwnerUpdate
	IsGroupOwnerUpdate bool `json:"isGroupOwnerUpdate,omitempty"`

	// Whether the user is locked out
	IsLockedOut *UpdateFieldValueOfBoolean `json:"isLockedOut,omitempty"`

	// Number of login failures
	LoginFailures *UpdateFieldValueOfInt32 `json:"loginFailures,omitempty"`

	// Whether OATH two-factor authentication is enabled
	OathTwoFactor *UpdateFieldValueOfBoolean `json:"oathTwoFactor,omitempty"`

	// Password
	Password *UpdateFieldValueOfString `json:"password,omitempty"`

	// Whether RADIUS two-factor authentication is enabled
	RadiusTwoFactor *UpdateFieldValueOfBoolean `json:"radiusTwoFactor,omitempty"`

	// RADIUS username
	RadiusUserName *UpdateFieldValueOfString `json:"radiusUserName,omitempty"`

	// Slack ID
	SlackID *UpdateFieldValueOfString `json:"slackId,omitempty"`

	// TimeOptionId
	TimeOptionID *UpdateFieldValueOfInt32 `json:"timeOptionId,omitempty"`

	// Whether two-factor authentication is enabled
	TwoFactor *UpdateFieldValueOfBoolean `json:"twoFactor,omitempty"`
}

// Validate validates this patch user model
func (m *PatchUserModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateOptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuoTwoFactor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFido2TwoFactor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddressRestrictionIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsApplicationAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsLockedOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginFailures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOathTwoFactor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRadiusTwoFactor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRadiusUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlackID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeOptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTwoFactor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchUserModel) validateDateOptionID(formats strfmt.Registry) error {
	if swag.IsZero(m.DateOptionID) { // not required
		return nil
	}

	if m.DateOptionID != nil {
		if err := m.DateOptionID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dateOptionId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dateOptionId")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateDisplayName(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if m.DisplayName != nil {
		if err := m.DisplayName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("displayName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("displayName")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateDuoTwoFactor(formats strfmt.Registry) error {
	if swag.IsZero(m.DuoTwoFactor) { // not required
		return nil
	}

	if m.DuoTwoFactor != nil {
		if err := m.DuoTwoFactor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duoTwoFactor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("duoTwoFactor")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateEmailAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailAddress) { // not required
		return nil
	}

	if m.EmailAddress != nil {
		if err := m.EmailAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emailAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateEnabled(formats strfmt.Registry) error {
	if swag.IsZero(m.Enabled) { // not required
		return nil
	}

	if m.Enabled != nil {
		if err := m.Enabled.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enabled")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enabled")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateFido2TwoFactor(formats strfmt.Registry) error {
	if swag.IsZero(m.Fido2TwoFactor) { // not required
		return nil
	}

	if m.Fido2TwoFactor != nil {
		if err := m.Fido2TwoFactor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fido2TwoFactor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fido2TwoFactor")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateIPAddressRestrictionIds(formats strfmt.Registry) error {
	if swag.IsZero(m.IPAddressRestrictionIds) { // not required
		return nil
	}

	if m.IPAddressRestrictionIds != nil {
		if err := m.IPAddressRestrictionIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipAddressRestrictionIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipAddressRestrictionIds")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateIsApplicationAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.IsApplicationAccount) { // not required
		return nil
	}

	if m.IsApplicationAccount != nil {
		if err := m.IsApplicationAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isApplicationAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isApplicationAccount")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateIsLockedOut(formats strfmt.Registry) error {
	if swag.IsZero(m.IsLockedOut) { // not required
		return nil
	}

	if m.IsLockedOut != nil {
		if err := m.IsLockedOut.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isLockedOut")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isLockedOut")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateLoginFailures(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginFailures) { // not required
		return nil
	}

	if m.LoginFailures != nil {
		if err := m.LoginFailures.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loginFailures")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loginFailures")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateOathTwoFactor(formats strfmt.Registry) error {
	if swag.IsZero(m.OathTwoFactor) { // not required
		return nil
	}

	if m.OathTwoFactor != nil {
		if err := m.OathTwoFactor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oathTwoFactor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oathTwoFactor")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if m.Password != nil {
		if err := m.Password.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateRadiusTwoFactor(formats strfmt.Registry) error {
	if swag.IsZero(m.RadiusTwoFactor) { // not required
		return nil
	}

	if m.RadiusTwoFactor != nil {
		if err := m.RadiusTwoFactor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("radiusTwoFactor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("radiusTwoFactor")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateRadiusUserName(formats strfmt.Registry) error {
	if swag.IsZero(m.RadiusUserName) { // not required
		return nil
	}

	if m.RadiusUserName != nil {
		if err := m.RadiusUserName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("radiusUserName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("radiusUserName")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateSlackID(formats strfmt.Registry) error {
	if swag.IsZero(m.SlackID) { // not required
		return nil
	}

	if m.SlackID != nil {
		if err := m.SlackID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slackId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slackId")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateTimeOptionID(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeOptionID) { // not required
		return nil
	}

	if m.TimeOptionID != nil {
		if err := m.TimeOptionID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeOptionId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeOptionId")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) validateTwoFactor(formats strfmt.Registry) error {
	if swag.IsZero(m.TwoFactor) { // not required
		return nil
	}

	if m.TwoFactor != nil {
		if err := m.TwoFactor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("twoFactor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("twoFactor")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this patch user model based on the context it is used
func (m *PatchUserModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateOptionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplayName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDuoTwoFactor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmailAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFido2TwoFactor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPAddressRestrictionIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsApplicationAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsLockedOut(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoginFailures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOathTwoFactor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePassword(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRadiusTwoFactor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRadiusUserName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSlackID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeOptionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTwoFactor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchUserModel) contextValidateDateOptionID(ctx context.Context, formats strfmt.Registry) error {

	if m.DateOptionID != nil {

		if swag.IsZero(m.DateOptionID) { // not required
			return nil
		}

		if err := m.DateOptionID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dateOptionId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dateOptionId")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateDisplayName(ctx context.Context, formats strfmt.Registry) error {

	if m.DisplayName != nil {

		if swag.IsZero(m.DisplayName) { // not required
			return nil
		}

		if err := m.DisplayName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("displayName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("displayName")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateDuoTwoFactor(ctx context.Context, formats strfmt.Registry) error {

	if m.DuoTwoFactor != nil {

		if swag.IsZero(m.DuoTwoFactor) { // not required
			return nil
		}

		if err := m.DuoTwoFactor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duoTwoFactor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("duoTwoFactor")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateEmailAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.EmailAddress != nil {

		if swag.IsZero(m.EmailAddress) { // not required
			return nil
		}

		if err := m.EmailAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("emailAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("emailAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateEnabled(ctx context.Context, formats strfmt.Registry) error {

	if m.Enabled != nil {

		if swag.IsZero(m.Enabled) { // not required
			return nil
		}

		if err := m.Enabled.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enabled")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enabled")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateFido2TwoFactor(ctx context.Context, formats strfmt.Registry) error {

	if m.Fido2TwoFactor != nil {

		if swag.IsZero(m.Fido2TwoFactor) { // not required
			return nil
		}

		if err := m.Fido2TwoFactor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fido2TwoFactor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fido2TwoFactor")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateIPAddressRestrictionIds(ctx context.Context, formats strfmt.Registry) error {

	if m.IPAddressRestrictionIds != nil {

		if swag.IsZero(m.IPAddressRestrictionIds) { // not required
			return nil
		}

		if err := m.IPAddressRestrictionIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipAddressRestrictionIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipAddressRestrictionIds")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateIsApplicationAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.IsApplicationAccount != nil {

		if swag.IsZero(m.IsApplicationAccount) { // not required
			return nil
		}

		if err := m.IsApplicationAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isApplicationAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isApplicationAccount")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateIsLockedOut(ctx context.Context, formats strfmt.Registry) error {

	if m.IsLockedOut != nil {

		if swag.IsZero(m.IsLockedOut) { // not required
			return nil
		}

		if err := m.IsLockedOut.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isLockedOut")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isLockedOut")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateLoginFailures(ctx context.Context, formats strfmt.Registry) error {

	if m.LoginFailures != nil {

		if swag.IsZero(m.LoginFailures) { // not required
			return nil
		}

		if err := m.LoginFailures.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loginFailures")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loginFailures")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateOathTwoFactor(ctx context.Context, formats strfmt.Registry) error {

	if m.OathTwoFactor != nil {

		if swag.IsZero(m.OathTwoFactor) { // not required
			return nil
		}

		if err := m.OathTwoFactor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oathTwoFactor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oathTwoFactor")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidatePassword(ctx context.Context, formats strfmt.Registry) error {

	if m.Password != nil {

		if swag.IsZero(m.Password) { // not required
			return nil
		}

		if err := m.Password.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateRadiusTwoFactor(ctx context.Context, formats strfmt.Registry) error {

	if m.RadiusTwoFactor != nil {

		if swag.IsZero(m.RadiusTwoFactor) { // not required
			return nil
		}

		if err := m.RadiusTwoFactor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("radiusTwoFactor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("radiusTwoFactor")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateRadiusUserName(ctx context.Context, formats strfmt.Registry) error {

	if m.RadiusUserName != nil {

		if swag.IsZero(m.RadiusUserName) { // not required
			return nil
		}

		if err := m.RadiusUserName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("radiusUserName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("radiusUserName")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateSlackID(ctx context.Context, formats strfmt.Registry) error {

	if m.SlackID != nil {

		if swag.IsZero(m.SlackID) { // not required
			return nil
		}

		if err := m.SlackID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slackId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slackId")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateTimeOptionID(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeOptionID != nil {

		if swag.IsZero(m.TimeOptionID) { // not required
			return nil
		}

		if err := m.TimeOptionID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeOptionId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeOptionId")
			}
			return err
		}
	}

	return nil
}

func (m *PatchUserModel) contextValidateTwoFactor(ctx context.Context, formats strfmt.Registry) error {

	if m.TwoFactor != nil {

		if swag.IsZero(m.TwoFactor) { // not required
			return nil
		}

		if err := m.TwoFactor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("twoFactor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("twoFactor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PatchUserModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchUserModel) UnmarshalBinary(b []byte) error {
	var res PatchUserModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
