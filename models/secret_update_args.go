// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecretUpdateArgs Secret update options
//
// swagger:model SecretUpdateArgs
type SecretUpdateArgs struct {

	// The id of the mapping entity that associates this secret to a specific access request workflow.
	AccessRequestWorkflowMapID *int32 `json:"accessRequestWorkflowMapId,omitempty"`

	// Whether the secret is in an active or deleted state.
	Active bool `json:"active,omitempty"`

	// Whether the secret’s password is automatically rotated on a schedule.
	AutoChangeEnabled bool `json:"autoChangeEnabled,omitempty"`

	// Whether the secret should be flagged for immediate password change.
	AutoChangeNextPassword string `json:"autoChangeNextPassword,omitempty"`

	// Whether the secret’s password is automatically changed when a secret is checked in. This is a security feature that prevents a use of the password retrieved from check-out after the secret is checked in.
	CheckOutChangePasswordEnabled bool `json:"checkOutChangePasswordEnabled,omitempty"`

	// Whether the user must check-out the secret to view it. Checking out gives the user exclusive access to the secret for a specified period or until the secret is checked in.
	CheckOutEnabled bool `json:"checkOutEnabled,omitempty"`

	// The number of minutes that a secret will remain checked out.
	CheckOutIntervalMinutes *int32 `json:"checkOutIntervalMinutes,omitempty"`

	// If the secret requires a comment to view or requires approval to view, a reason for accessing the secret must be provided.
	Comment string `json:"comment,omitempty"`

	// If the secret is DoubleLocked, this is the DoubleLock password needed to access the secret.
	DoubleLockPassword string `json:"doubleLockPassword,omitempty"`

	// Whether the secret inherits permissions from the containing folder.
	EnableInheritPermissions *bool `json:"enableInheritPermissions,omitempty"`

	// Whether the secret policy is inherited from the containing folder.
	EnableInheritSecretPolicy bool `json:"enableInheritSecretPolicy,omitempty"`

	// If the secret is contained in a folder, the id of the containing folder. Set to null or -1 for secrets that are in the root folder.
	FolderID *int32 `json:"folderId,omitempty"`

	// Force the secret to be checked in, even if checked out by someone else. The user must have the "Force Check In" permission.
	ForceCheckIn bool `json:"forceCheckIn,omitempty"`

	// The id of the Secret to update. Must match the {id} in the path.
	// Required: true
	// Minimum: 1
	ID *int32 `json:"id"`

	// If the secret is deactivated, this must be set to true in order to access the secret. The user must also have the "View Inactive Secrets" permission.
	IncludeInactive bool `json:"includeInactive,omitempty"`

	// A list of secret item field values.
	// Required: true
	Items []*RestSecretItem `json:"items"`

	// When an SSH secret is proxied, you can choose to connect as another user and then do an su to the current secret’s user. This is a common practice for connecting with a lower privileged account and then switching to the root user.
	LauncherConnectAsSecretID *int32 `json:"launcherConnectAsSecretId,omitempty"`

	// The name to display for the secret.
	// Required: true
	Name *string `json:"name"`

	// New secret password.
	NewPassword string `json:"newPassword,omitempty"`

	// Don't check out the secret automatically.
	NoAutoCheckout bool `json:"noAutoCheckout,omitempty"`

	// The id of the password change script to use on applicable web password secrets.
	PasswordTypeWebScriptID *int32 `json:"passwordTypeWebScriptId,omitempty"`

	// Whether sessions launched on this secret use Secret Server’s proxying or connect directly.
	ProxyEnabled bool `json:"proxyEnabled,omitempty"`

	// Whether the user must enter a comment to view the secret.
	RequiresComment bool `json:"requiresComment,omitempty"`

	// The id of the secret policy that controls the security and other settings of the secret. Set to null to not assign a secret policy.
	SecretPolicyID *int32 `json:"secretPolicyId,omitempty"`

	// Whether session recording is enabled.
	SessionRecordingEnabled bool `json:"sessionRecordingEnabled,omitempty"`

	// The id of the distributed engine site that is used by this secret for operations such as password changing.
	// Minimum: 1
	SiteID int32 `json:"siteId,omitempty"`

	// SSH key options
	SSHKeyArgs *SSHKeyArgs `json:"sshKeyArgs,omitempty"`

	// If the secret requires a comment to view or requires approval and a user must provide a help desk a ticket number, this is the ticket number to the help desk request.
	TicketNumber string `json:"ticketNumber,omitempty"`

	// If the secret requires a comment to view or requires approval and a user must provide a help desk a ticket number, this is the id of the help desk system configured in Secret Server that should be used to validate the ticket number.
	TicketSystemID *int32 `json:"ticketSystemId,omitempty"`

	// Whether the web launcher will require the browser to run in incognito mode.
	WebLauncherRequiresIncognitoMode *bool `json:"webLauncherRequiresIncognitoMode,omitempty"`
}

// Validate validates this secret update args
func (m *SecretUpdateArgs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSiteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHKeyArgs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretUpdateArgs) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *SecretUpdateArgs) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecretUpdateArgs) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SecretUpdateArgs) validateSiteID(formats strfmt.Registry) error {
	if swag.IsZero(m.SiteID) { // not required
		return nil
	}

	if err := validate.MinimumInt("siteId", "body", int64(m.SiteID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *SecretUpdateArgs) validateSSHKeyArgs(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHKeyArgs) { // not required
		return nil
	}

	if m.SSHKeyArgs != nil {
		if err := m.SSHKeyArgs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshKeyArgs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshKeyArgs")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this secret update args based on the context it is used
func (m *SecretUpdateArgs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHKeyArgs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretUpdateArgs) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {

			if swag.IsZero(m.Items[i]) { // not required
				return nil
			}

			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecretUpdateArgs) contextValidateSSHKeyArgs(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHKeyArgs != nil {

		if swag.IsZero(m.SSHKeyArgs) { // not required
			return nil
		}

		if err := m.SSHKeyArgs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshKeyArgs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshKeyArgs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecretUpdateArgs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecretUpdateArgs) UnmarshalBinary(b []byte) error {
	var res SecretUpdateArgs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
