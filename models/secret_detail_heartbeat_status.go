// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecretDetailHeartbeatStatus Current status of heartbeat
//
// swagger:model SecretDetailHeartbeatStatus
type SecretDetailHeartbeatStatus string

func NewSecretDetailHeartbeatStatus(value SecretDetailHeartbeatStatus) *SecretDetailHeartbeatStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SecretDetailHeartbeatStatus.
func (m SecretDetailHeartbeatStatus) Pointer() *SecretDetailHeartbeatStatus {
	return &m
}

const (

	// SecretDetailHeartbeatStatusFailed captures enum value "Failed"
	SecretDetailHeartbeatStatusFailed SecretDetailHeartbeatStatus = "Failed"

	// SecretDetailHeartbeatStatusSuccess captures enum value "Success"
	SecretDetailHeartbeatStatusSuccess SecretDetailHeartbeatStatus = "Success"

	// SecretDetailHeartbeatStatusPending captures enum value "Pending"
	SecretDetailHeartbeatStatusPending SecretDetailHeartbeatStatus = "Pending"

	// SecretDetailHeartbeatStatusDisabled captures enum value "Disabled"
	SecretDetailHeartbeatStatusDisabled SecretDetailHeartbeatStatus = "Disabled"

	// SecretDetailHeartbeatStatusUnableToConnect captures enum value "UnableToConnect"
	SecretDetailHeartbeatStatusUnableToConnect SecretDetailHeartbeatStatus = "UnableToConnect"

	// SecretDetailHeartbeatStatusUnknownError captures enum value "UnknownError"
	SecretDetailHeartbeatStatusUnknownError SecretDetailHeartbeatStatus = "UnknownError"

	// SecretDetailHeartbeatStatusIncompatibleHost captures enum value "IncompatibleHost"
	SecretDetailHeartbeatStatusIncompatibleHost SecretDetailHeartbeatStatus = "IncompatibleHost"

	// SecretDetailHeartbeatStatusAccountLockedOut captures enum value "AccountLockedOut"
	SecretDetailHeartbeatStatusAccountLockedOut SecretDetailHeartbeatStatus = "AccountLockedOut"

	// SecretDetailHeartbeatStatusDNSMismatch captures enum value "DnsMismatch"
	SecretDetailHeartbeatStatusDNSMismatch SecretDetailHeartbeatStatus = "DnsMismatch"

	// SecretDetailHeartbeatStatusUnableToValidateServerPublicKey captures enum value "UnableToValidateServerPublicKey"
	SecretDetailHeartbeatStatusUnableToValidateServerPublicKey SecretDetailHeartbeatStatus = "UnableToValidateServerPublicKey"

	// SecretDetailHeartbeatStatusProcessing captures enum value "Processing"
	SecretDetailHeartbeatStatusProcessing SecretDetailHeartbeatStatus = "Processing"
)

// for schema
var secretDetailHeartbeatStatusEnum []interface{}

func init() {
	var res []SecretDetailHeartbeatStatus
	if err := json.Unmarshal([]byte(`["Failed","Success","Pending","Disabled","UnableToConnect","UnknownError","IncompatibleHost","AccountLockedOut","DnsMismatch","UnableToValidateServerPublicKey","Processing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		secretDetailHeartbeatStatusEnum = append(secretDetailHeartbeatStatusEnum, v)
	}
}

func (m SecretDetailHeartbeatStatus) validateSecretDetailHeartbeatStatusEnum(path, location string, value SecretDetailHeartbeatStatus) error {
	if err := validate.EnumCase(path, location, value, secretDetailHeartbeatStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this secret detail heartbeat status
func (m SecretDetailHeartbeatStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecretDetailHeartbeatStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this secret detail heartbeat status based on context it is used
func (m SecretDetailHeartbeatStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
