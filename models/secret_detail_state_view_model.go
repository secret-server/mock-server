// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecretDetailStateViewModel Secret Detail State View Model
//
// swagger:model SecretDetailStateViewModel
type SecretDetailStateViewModel struct {

	// Allowed action for current user
	Actions []SecretDetailActionType `json:"actions"`

	// Date when the current approval expires, or null if there is no open approval
	// Format: date-time
	ApprovalEnd *strfmt.DateTime `json:"approvalEnd,omitempty"`

	// Secret Detail State Actions
	AvailableActions *SecretDetailStateActionsModel `json:"availableActions,omitempty"`

	// Number of minutes before checkout
	CheckOutIntervalMinutes *int32 `json:"checkOutIntervalMinutes,omitempty"`

	// Minutes remaining in check out
	CheckOutMinutesRemaining *int32 `json:"checkOutMinutesRemaining,omitempty"`

	// Display Name of User that has the secret checked out
	CheckedOutUserDisplayName string `json:"checkedOutUserDisplayName,omitempty"`

	// User Secret is checked out to
	CheckedOutUserID *int32 `json:"checkedOutUserId,omitempty"`

	// Folder Id
	FolderID *int32 `json:"folderId,omitempty"`

	// Folder Name
	FolderName string `json:"folderName,omitempty"`

	// Secret Id
	ID *int32 `json:"id,omitempty"`

	// Is this secret inheriting permissions from its folder
	InheritPermissions bool `json:"inheritPermissions,omitempty"`

	// Active indicator
	IsActive *bool `json:"isActive,omitempty"`

	// Is the Secret checked out
	IsCheckedOut *bool `json:"isCheckedOut,omitempty"`

	// Indicates whether the Secret is checked out by the current user
	IsCheckedOutByCurrentUser *bool `json:"isCheckedOutByCurrentUser,omitempty"`

	// The last password change failed when true
	PasswordChangeFailed *bool `json:"passwordChangeFailed,omitempty"`

	// Pending Password change on secret indicator
	PasswordChangePending *bool `json:"passwordChangePending,omitempty"`

	// Minute mark to show check out warning
	RemainingTimeWarningMinuteMarker *int32 `json:"remainingTimeWarningMinuteMarker,omitempty"`

	// Role that current user has on Secret
	Role *string `json:"role,omitempty"`

	// Secret Name
	SecretName string `json:"secretName,omitempty"`

	// Current State of the Secret
	SecretState SecretAccessRequired `json:"secretState,omitempty"`

	// Minutes remaining before showing check in warning
	WarningMinutesRemaining *int32 `json:"warningMinutesRemaining,omitempty"`
}

// Validate validates this secret detail state view model
func (m *SecretDetailStateViewModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApprovalEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretDetailStateViewModel) validateActions(formats strfmt.Registry) error {
	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {

		if err := m.Actions[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SecretDetailStateViewModel) validateApprovalEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovalEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("approvalEnd", "body", "date-time", m.ApprovalEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SecretDetailStateViewModel) validateAvailableActions(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableActions) { // not required
		return nil
	}

	if m.AvailableActions != nil {
		if err := m.AvailableActions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availableActions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availableActions")
			}
			return err
		}
	}

	return nil
}

func (m *SecretDetailStateViewModel) validateSecretState(formats strfmt.Registry) error {
	if swag.IsZero(m.SecretState) { // not required
		return nil
	}

	if err := m.SecretState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secretState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("secretState")
		}
		return err
	}

	return nil
}

// ContextValidate validate this secret detail state view model based on the context it is used
func (m *SecretDetailStateViewModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailableActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecretState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretDetailStateViewModel) contextValidateActions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Actions); i++ {

		if swag.IsZero(m.Actions[i]) { // not required
			return nil
		}

		if err := m.Actions[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SecretDetailStateViewModel) contextValidateAvailableActions(ctx context.Context, formats strfmt.Registry) error {

	if m.AvailableActions != nil {

		if swag.IsZero(m.AvailableActions) { // not required
			return nil
		}

		if err := m.AvailableActions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availableActions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availableActions")
			}
			return err
		}
	}

	return nil
}

func (m *SecretDetailStateViewModel) contextValidateSecretState(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SecretState) { // not required
		return nil
	}

	if err := m.SecretState.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("secretState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("secretState")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecretDetailStateViewModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecretDetailStateViewModel) UnmarshalBinary(b []byte) error {
	var res SecretDetailStateViewModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
