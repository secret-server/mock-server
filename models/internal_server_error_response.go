// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InternalServerErrorResponse Response object for internal server errors
//
// swagger:model InternalServerErrorResponse
type InternalServerErrorResponse struct {

	// Error message from exception
	// Required: true
	ExceptionMessage *string `json:"exceptionMessage"`

	// Exception type
	// Required: true
	ExceptionType *string `json:"exceptionType"`

	// Error message
	// Required: true
	Message *string `json:"message"`

	// Exception stack trace
	// Required: true
	StackTrace *string `json:"stackTrace"`
}

// Validate validates this internal server error response
func (m *InternalServerErrorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExceptionMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExceptionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackTrace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InternalServerErrorResponse) validateExceptionMessage(formats strfmt.Registry) error {

	if err := validate.Required("exceptionMessage", "body", m.ExceptionMessage); err != nil {
		return err
	}

	return nil
}

func (m *InternalServerErrorResponse) validateExceptionType(formats strfmt.Registry) error {

	if err := validate.Required("exceptionType", "body", m.ExceptionType); err != nil {
		return err
	}

	return nil
}

func (m *InternalServerErrorResponse) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *InternalServerErrorResponse) validateStackTrace(formats strfmt.Registry) error {

	if err := validate.Required("stackTrace", "body", m.StackTrace); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this internal server error response based on context it is used
func (m *InternalServerErrorResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InternalServerErrorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InternalServerErrorResponse) UnmarshalBinary(b []byte) error {
	var res InternalServerErrorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
