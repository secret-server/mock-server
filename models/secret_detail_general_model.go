// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecretDetailGeneralModel Secret Detail General
//
// swagger:model SecretDetailGeneralModel
type SecretDetailGeneralModel struct {

	// Whether the secret is active
	Active bool `json:"active,omitempty"`

	// Whether the password should automatically change upon expiration.
	AutoChangePassword bool `json:"autoChangePassword,omitempty"`

	// Can Generate SSH Key
	CanGenerateSSHKey bool `json:"canGenerateSshKey,omitempty"`

	// Whether the secret policy is inherited from the containing folder
	EnableInheritSecretPolicy bool `json:"enableInheritSecretPolicy,omitempty"`

	// Expiration
	Expiration string `json:"expiration,omitempty"`

	// Secret Fields
	Fields []string `json:"fields"`

	// Containing folder ID
	Folder *int32 `json:"folder,omitempty"`

	// Heartbeat Enabled
	HeartbeatEnabled bool `json:"heartbeatEnabled,omitempty"`

	// Secret Detail General Id
	ID int32 `json:"id,omitempty"`

	// Is Favorite
	IsFavorite bool `json:"isFavorite,omitempty"`

	// Whether the secret is out of sync
	IsOutOfSync bool `json:"isOutOfSync,omitempty"`

	// Is One Time Password Enabled
	IsTotpEnabled bool `json:"isTotpEnabled,omitempty"`

	// Time of last heartbeat check
	// Format: date-time
	LastHeartBeatCheck *strfmt.DateTime `json:"lastHeartBeatCheck,omitempty"`

	// Current status of heartbeat
	LastHeartBeatStatus SecretDetailHeartbeatStatus `json:"lastHeartBeatStatus,omitempty"`

	// Launchers
	Launchers []*SecretDetailLauncher `json:"launchers"`

	// Secret Detail General Name
	Name string `json:"name,omitempty"`

	// Reason message if the secret is out of sync
	OutOfSyncReason string `json:"outOfSyncReason,omitempty"`

	// Secret Policy
	SecretPolicy *int32 `json:"secretPolicy,omitempty"`

	// Site
	Site *int32 `json:"site,omitempty"`

	// Private Key Field Slug
	SlugPrivateKey string `json:"slugPrivateKey,omitempty"`

	// Public Key Field Slug
	SlugPublicKey string `json:"slugPublicKey,omitempty"`

	// Secret template
	Template *int32 `json:"template,omitempty"`

	// One Time Password Field Slug
	TotpPasswordSlug string `json:"totpPasswordSlug,omitempty"`
}

// Validate validates this secret detail general model
func (m *SecretDetailGeneralModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastHeartBeatCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastHeartBeatStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaunchers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretDetailGeneralModel) validateLastHeartBeatCheck(formats strfmt.Registry) error {
	if swag.IsZero(m.LastHeartBeatCheck) { // not required
		return nil
	}

	if err := validate.FormatOf("lastHeartBeatCheck", "body", "date-time", m.LastHeartBeatCheck.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SecretDetailGeneralModel) validateLastHeartBeatStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LastHeartBeatStatus) { // not required
		return nil
	}

	if err := m.LastHeartBeatStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastHeartBeatStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastHeartBeatStatus")
		}
		return err
	}

	return nil
}

func (m *SecretDetailGeneralModel) validateLaunchers(formats strfmt.Registry) error {
	if swag.IsZero(m.Launchers) { // not required
		return nil
	}

	for i := 0; i < len(m.Launchers); i++ {
		if swag.IsZero(m.Launchers[i]) { // not required
			continue
		}

		if m.Launchers[i] != nil {
			if err := m.Launchers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("launchers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("launchers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this secret detail general model based on the context it is used
func (m *SecretDetailGeneralModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastHeartBeatStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLaunchers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretDetailGeneralModel) contextValidateLastHeartBeatStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.LastHeartBeatStatus) { // not required
		return nil
	}

	if err := m.LastHeartBeatStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastHeartBeatStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lastHeartBeatStatus")
		}
		return err
	}

	return nil
}

func (m *SecretDetailGeneralModel) contextValidateLaunchers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Launchers); i++ {

		if m.Launchers[i] != nil {

			if swag.IsZero(m.Launchers[i]) { // not required
				return nil
			}

			if err := m.Launchers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("launchers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("launchers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecretDetailGeneralModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecretDetailGeneralModel) UnmarshalBinary(b []byte) error {
	var res SecretDetailGeneralModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
