// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecretAccessRequired Secret Access Required
//
// swagger:model SecretAccessRequired
type SecretAccessRequired string

func NewSecretAccessRequired(value SecretAccessRequired) *SecretAccessRequired {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SecretAccessRequired.
func (m SecretAccessRequired) Pointer() *SecretAccessRequired {
	return &m
}

const (

	// SecretAccessRequiredNone captures enum value "None"
	SecretAccessRequiredNone SecretAccessRequired = "None"

	// SecretAccessRequiredRequiresApproval captures enum value "RequiresApproval"
	SecretAccessRequiredRequiresApproval SecretAccessRequired = "RequiresApproval"

	// SecretAccessRequiredRequiresCheckout captures enum value "RequiresCheckout"
	SecretAccessRequiredRequiresCheckout SecretAccessRequired = "RequiresCheckout"

	// SecretAccessRequiredRequiresComment captures enum value "RequiresComment"
	SecretAccessRequiredRequiresComment SecretAccessRequired = "RequiresComment"

	// SecretAccessRequiredRequiresDoubleLockPassword captures enum value "RequiresDoubleLockPassword"
	SecretAccessRequiredRequiresDoubleLockPassword SecretAccessRequired = "RequiresDoubleLockPassword"

	// SecretAccessRequiredCreateDoubleLockPassword captures enum value "CreateDoubleLockPassword"
	SecretAccessRequiredCreateDoubleLockPassword SecretAccessRequired = "CreateDoubleLockPassword"

	// SecretAccessRequiredDoubleLockNoAccess captures enum value "DoubleLockNoAccess"
	SecretAccessRequiredDoubleLockNoAccess SecretAccessRequired = "DoubleLockNoAccess"

	// SecretAccessRequiredCannotView captures enum value "CannotView"
	SecretAccessRequiredCannotView SecretAccessRequired = "CannotView"

	// SecretAccessRequiredRequiresUndelete captures enum value "RequiresUndelete"
	SecretAccessRequiredRequiresUndelete SecretAccessRequired = "RequiresUndelete"

	// SecretAccessRequiredRequiresCheckoutPendingRPC captures enum value "RequiresCheckoutPendingRPC"
	SecretAccessRequiredRequiresCheckoutPendingRPC SecretAccessRequired = "RequiresCheckoutPendingRPC"

	// SecretAccessRequiredRequiresCheckoutAndComment captures enum value "RequiresCheckoutAndComment"
	SecretAccessRequiredRequiresCheckoutAndComment SecretAccessRequired = "RequiresCheckoutAndComment"

	// SecretAccessRequiredRequiresMfaChallenge captures enum value "RequiresMfaChallenge"
	SecretAccessRequiredRequiresMfaChallenge SecretAccessRequired = "RequiresMfaChallenge"
)

// for schema
var secretAccessRequiredEnum []interface{}

func init() {
	var res []SecretAccessRequired
	if err := json.Unmarshal([]byte(`["None","RequiresApproval","RequiresCheckout","RequiresComment","RequiresDoubleLockPassword","CreateDoubleLockPassword","DoubleLockNoAccess","CannotView","RequiresUndelete","RequiresCheckoutPendingRPC","RequiresCheckoutAndComment","RequiresMfaChallenge"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		secretAccessRequiredEnum = append(secretAccessRequiredEnum, v)
	}
}

func (m SecretAccessRequired) validateSecretAccessRequiredEnum(path, location string, value SecretAccessRequired) error {
	if err := validate.EnumCase(path, location, value, secretAccessRequiredEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this secret access required
func (m SecretAccessRequired) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecretAccessRequiredEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this secret access required based on context it is used
func (m SecretAccessRequired) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
