// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecretDetailExpirationUpdateModel Data
//
// swagger:model SecretDetailExpirationUpdateModel
type SecretDetailExpirationUpdateModel struct {

	// ExpirationDate
	ExpirationDate *UpdateFieldValueOfOptionalDateTime `json:"expirationDate,omitempty"`

	// ExpirationDayInterval
	ExpirationDayInterval *UpdateFieldValueOfOptionalInt32 `json:"expirationDayInterval,omitempty"`

	// ExpirationType
	ExpirationType *UpdateFieldValueOfSecretDetailExpirationUpdateType `json:"expirationType,omitempty"`
}

// Validate validates this secret detail expiration update model
func (m *SecretDetailExpirationUpdateModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDayInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretDetailExpirationUpdateModel) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if m.ExpirationDate != nil {
		if err := m.ExpirationDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expirationDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expirationDate")
			}
			return err
		}
	}

	return nil
}

func (m *SecretDetailExpirationUpdateModel) validateExpirationDayInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDayInterval) { // not required
		return nil
	}

	if m.ExpirationDayInterval != nil {
		if err := m.ExpirationDayInterval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expirationDayInterval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expirationDayInterval")
			}
			return err
		}
	}

	return nil
}

func (m *SecretDetailExpirationUpdateModel) validateExpirationType(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationType) { // not required
		return nil
	}

	if m.ExpirationType != nil {
		if err := m.ExpirationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expirationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expirationType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this secret detail expiration update model based on the context it is used
func (m *SecretDetailExpirationUpdateModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExpirationDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpirationDayInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpirationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretDetailExpirationUpdateModel) contextValidateExpirationDate(ctx context.Context, formats strfmt.Registry) error {

	if m.ExpirationDate != nil {

		if swag.IsZero(m.ExpirationDate) { // not required
			return nil
		}

		if err := m.ExpirationDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expirationDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expirationDate")
			}
			return err
		}
	}

	return nil
}

func (m *SecretDetailExpirationUpdateModel) contextValidateExpirationDayInterval(ctx context.Context, formats strfmt.Registry) error {

	if m.ExpirationDayInterval != nil {

		if swag.IsZero(m.ExpirationDayInterval) { // not required
			return nil
		}

		if err := m.ExpirationDayInterval.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expirationDayInterval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expirationDayInterval")
			}
			return err
		}
	}

	return nil
}

func (m *SecretDetailExpirationUpdateModel) contextValidateExpirationType(ctx context.Context, formats strfmt.Registry) error {

	if m.ExpirationType != nil {

		if swag.IsZero(m.ExpirationType) { // not required
			return nil
		}

		if err := m.ExpirationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expirationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expirationType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecretDetailExpirationUpdateModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecretDetailExpirationUpdateModel) UnmarshalBinary(b []byte) error {
	var res SecretDetailExpirationUpdateModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
