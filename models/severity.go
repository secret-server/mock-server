// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Severity Error severity level
//
// swagger:model Severity
type Severity string

func NewSeverity(value Severity) *Severity {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Severity.
func (m Severity) Pointer() *Severity {
	return &m
}

const (

	// SeverityNone captures enum value "None"
	SeverityNone Severity = "None"

	// SeverityRetry captures enum value "Retry"
	SeverityRetry Severity = "Retry"

	// SeverityWarn captures enum value "Warn"
	SeverityWarn Severity = "Warn"

	// SeverityCritical captures enum value "Critical"
	SeverityCritical Severity = "Critical"

	// SeverityFatal captures enum value "Fatal"
	SeverityFatal Severity = "Fatal"
)

// for schema
var severityEnum []interface{}

func init() {
	var res []Severity
	if err := json.Unmarshal([]byte(`["None","Retry","Warn","Critical","Fatal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		severityEnum = append(severityEnum, v)
	}
}

func (m Severity) validateSeverityEnum(path, location string, value Severity) error {
	if err := validate.EnumCase(path, location, value, severityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this severity
func (m Severity) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSeverityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this severity based on context it is used
func (m Severity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
