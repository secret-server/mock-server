// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HeartbeatStatus Current status of heartbeat
//
// swagger:model HeartbeatStatus
type HeartbeatStatus string

func NewHeartbeatStatus(value HeartbeatStatus) *HeartbeatStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HeartbeatStatus.
func (m HeartbeatStatus) Pointer() *HeartbeatStatus {
	return &m
}

const (

	// HeartbeatStatusFailed captures enum value "Failed"
	HeartbeatStatusFailed HeartbeatStatus = "Failed"

	// HeartbeatStatusSuccess captures enum value "Success"
	HeartbeatStatusSuccess HeartbeatStatus = "Success"

	// HeartbeatStatusPending captures enum value "Pending"
	HeartbeatStatusPending HeartbeatStatus = "Pending"

	// HeartbeatStatusDisabled captures enum value "Disabled"
	HeartbeatStatusDisabled HeartbeatStatus = "Disabled"

	// HeartbeatStatusUnableToConnect captures enum value "UnableToConnect"
	HeartbeatStatusUnableToConnect HeartbeatStatus = "UnableToConnect"

	// HeartbeatStatusUnknownError captures enum value "UnknownError"
	HeartbeatStatusUnknownError HeartbeatStatus = "UnknownError"

	// HeartbeatStatusIncompatibleHost captures enum value "IncompatibleHost"
	HeartbeatStatusIncompatibleHost HeartbeatStatus = "IncompatibleHost"

	// HeartbeatStatusAccountLockedOut captures enum value "AccountLockedOut"
	HeartbeatStatusAccountLockedOut HeartbeatStatus = "AccountLockedOut"

	// HeartbeatStatusDNSMismatch captures enum value "DnsMismatch"
	HeartbeatStatusDNSMismatch HeartbeatStatus = "DnsMismatch"

	// HeartbeatStatusUnableToValidateServerPublicKey captures enum value "UnableToValidateServerPublicKey"
	HeartbeatStatusUnableToValidateServerPublicKey HeartbeatStatus = "UnableToValidateServerPublicKey"

	// HeartbeatStatusProcessing captures enum value "Processing"
	HeartbeatStatusProcessing HeartbeatStatus = "Processing"

	// HeartbeatStatusArgumentError captures enum value "ArgumentError"
	HeartbeatStatusArgumentError HeartbeatStatus = "ArgumentError"

	// HeartbeatStatusAccessDenied captures enum value "AccessDenied"
	HeartbeatStatusAccessDenied HeartbeatStatus = "AccessDenied"
)

// for schema
var heartbeatStatusEnum []interface{}

func init() {
	var res []HeartbeatStatus
	if err := json.Unmarshal([]byte(`["Failed","Success","Pending","Disabled","UnableToConnect","UnknownError","IncompatibleHost","AccountLockedOut","DnsMismatch","UnableToValidateServerPublicKey","Processing","ArgumentError","AccessDenied"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		heartbeatStatusEnum = append(heartbeatStatusEnum, v)
	}
}

func (m HeartbeatStatus) validateHeartbeatStatusEnum(path, location string, value HeartbeatStatus) error {
	if err := validate.EnumCase(path, location, value, heartbeatStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this heartbeat status
func (m HeartbeatStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHeartbeatStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this heartbeat status based on context it is used
func (m HeartbeatStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
