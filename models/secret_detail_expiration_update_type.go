// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecretDetailExpirationUpdateType Value
//
// swagger:model SecretDetailExpirationUpdateType
type SecretDetailExpirationUpdateType string

func NewSecretDetailExpirationUpdateType(value SecretDetailExpirationUpdateType) *SecretDetailExpirationUpdateType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SecretDetailExpirationUpdateType.
func (m SecretDetailExpirationUpdateType) Pointer() *SecretDetailExpirationUpdateType {
	return &m
}

const (

	// SecretDetailExpirationUpdateTypeTemplate captures enum value "Template"
	SecretDetailExpirationUpdateTypeTemplate SecretDetailExpirationUpdateType = "Template"

	// SecretDetailExpirationUpdateTypeDayInterval captures enum value "DayInterval"
	SecretDetailExpirationUpdateTypeDayInterval SecretDetailExpirationUpdateType = "DayInterval"

	// SecretDetailExpirationUpdateTypeSpecificDate captures enum value "SpecificDate"
	SecretDetailExpirationUpdateTypeSpecificDate SecretDetailExpirationUpdateType = "SpecificDate"
)

// for schema
var secretDetailExpirationUpdateTypeEnum []interface{}

func init() {
	var res []SecretDetailExpirationUpdateType
	if err := json.Unmarshal([]byte(`["Template","DayInterval","SpecificDate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		secretDetailExpirationUpdateTypeEnum = append(secretDetailExpirationUpdateTypeEnum, v)
	}
}

func (m SecretDetailExpirationUpdateType) validateSecretDetailExpirationUpdateTypeEnum(path, location string, value SecretDetailExpirationUpdateType) error {
	if err := validate.EnumCase(path, location, value, secretDetailExpirationUpdateTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this secret detail expiration update type
func (m SecretDetailExpirationUpdateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecretDetailExpirationUpdateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this secret detail expiration update type based on context it is used
func (m SecretDetailExpirationUpdateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
