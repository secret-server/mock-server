// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecretSearchExtendedSummary SecretSearchExtendedSummary[]
//
// swagger:model SecretSearchExtendedSummary
type SecretSearchExtendedSummary struct {

	// Does this Secret have launchers the current user can use
	HasLaunchers bool `json:"hasLaunchers,omitempty"`

	// Is this a favorite secret for the current user
	IsFavorite bool `json:"isFavorite,omitempty"`

	// Does this Secret have launchers the current user can use
	// Format: date-time
	LastAccessed *strfmt.DateTime `json:"lastAccessed,omitempty"`

	// Secret ID
	SecretID int32 `json:"secretId,omitempty"`

	// Secret Name
	SecretName string `json:"secretName,omitempty"`

	// Does this Secret have launchers the current user can use
	TotalSecretViews int32 `json:"totalSecretViews,omitempty"`
}

// Validate validates this secret search extended summary
func (m *SecretSearchExtendedSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastAccessed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretSearchExtendedSummary) validateLastAccessed(formats strfmt.Registry) error {
	if swag.IsZero(m.LastAccessed) { // not required
		return nil
	}

	if err := validate.FormatOf("lastAccessed", "body", "date-time", m.LastAccessed.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this secret search extended summary based on context it is used
func (m *SecretSearchExtendedSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SecretSearchExtendedSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecretSearchExtendedSummary) UnmarshalBinary(b []byte) error {
	var res SecretSearchExtendedSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
