// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecretDetailSettingsModel Secret Detail Settings
//
// swagger:model SecretDetailSettingsModel
type SecretDetailSettingsModel struct {

	// Expiration Date
	// Format: date-time
	ExpirationDate *strfmt.DateTime `json:"expirationDate,omitempty"`

	// Expiration Day Interval
	ExpirationDayInterval *int32 `json:"expirationDayInterval,omitempty"`

	// Expiration Template Text
	ExpirationTemplateText string `json:"expirationTemplateText,omitempty"`

	// Expiration Type
	ExpirationType SecretDetailExpirationType `json:"expirationType,omitempty"`

	// Send Email When Changed
	SendEmailWhenChanged bool `json:"sendEmailWhenChanged,omitempty"`

	// Send Email When Heartbeat Fails
	SendEmailWhenHeartbeatFails bool `json:"sendEmailWhenHeartbeatFails,omitempty"`

	// Send Email When Viewed
	SendEmailWhenViewed bool `json:"sendEmailWhenViewed,omitempty"`
}

// Validate validates this secret detail settings model
func (m *SecretDetailSettingsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretDetailSettingsModel) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SecretDetailSettingsModel) validateExpirationType(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationType) { // not required
		return nil
	}

	if err := m.ExpirationType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expirationType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("expirationType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this secret detail settings model based on the context it is used
func (m *SecretDetailSettingsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExpirationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretDetailSettingsModel) contextValidateExpirationType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationType) { // not required
		return nil
	}

	if err := m.ExpirationType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("expirationType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("expirationType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecretDetailSettingsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecretDetailSettingsModel) UnmarshalBinary(b []byte) error {
	var res SecretDetailSettingsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
