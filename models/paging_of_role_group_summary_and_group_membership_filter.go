// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PagingOfRoleGroupSummaryAndGroupMembershipFilter Specify filtering, paging, sorting options for querying records and returning results
//
// swagger:model PagingOfRoleGroupSummaryAndGroupMembershipFilter
type PagingOfRoleGroupSummaryAndGroupMembershipFilter struct {

	// Number of result batches available with current query options
	BatchCount int32 `json:"batchCount,omitempty"`

	// Index of current result page
	CurrentPage int32 `json:"currentPage,omitempty"`

	// Additional query options
	Filter *GroupMembershipFilter `json:"filter,omitempty"`

	// Whether there are any results in additional pages
	HasNext bool `json:"hasNext,omitempty"`

	// Whether there are any results in previous pages
	HasPrev bool `json:"hasPrev,omitempty"`

	// Correct value of 'skip' for the next page of results
	NextSkip int32 `json:"nextSkip,omitempty"`

	// Number of result pages available with current query options
	PageCount int32 `json:"pageCount,omitempty"`

	// Correct value of 'skip' for the previous page of results
	PrevSkip int32 `json:"prevSkip,omitempty"`

	// Query results
	Records []*RoleGroupSummary `json:"records"`

	// Severity of any errors
	Severity Severity `json:"severity,omitempty"`

	// Number of records to skip before taking results
	Skip int32 `json:"skip,omitempty"`

	// List of sort properties
	SortBy []*Sort `json:"sortBy"`

	// Whether the query executed successfully
	Success bool `json:"success,omitempty"`

	// Maximum number of records to include in results
	Take int32 `json:"take,omitempty"`

	// Total number of results available
	Total int32 `json:"total,omitempty"`
}

// Validate validates this paging of role group summary and group membership filter
func (m *PagingOfRoleGroupSummaryAndGroupMembershipFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PagingOfRoleGroupSummaryAndGroupMembershipFilter) validateFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.Filter) { // not required
		return nil
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *PagingOfRoleGroupSummaryAndGroupMembershipFilter) validateRecords(formats strfmt.Registry) error {
	if swag.IsZero(m.Records) { // not required
		return nil
	}

	for i := 0; i < len(m.Records); i++ {
		if swag.IsZero(m.Records[i]) { // not required
			continue
		}

		if m.Records[i] != nil {
			if err := m.Records[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PagingOfRoleGroupSummaryAndGroupMembershipFilter) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	if err := m.Severity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("severity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("severity")
		}
		return err
	}

	return nil
}

func (m *PagingOfRoleGroupSummaryAndGroupMembershipFilter) validateSortBy(formats strfmt.Registry) error {
	if swag.IsZero(m.SortBy) { // not required
		return nil
	}

	for i := 0; i < len(m.SortBy); i++ {
		if swag.IsZero(m.SortBy[i]) { // not required
			continue
		}

		if m.SortBy[i] != nil {
			if err := m.SortBy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sortBy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sortBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this paging of role group summary and group membership filter based on the context it is used
func (m *PagingOfRoleGroupSummaryAndGroupMembershipFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSortBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PagingOfRoleGroupSummaryAndGroupMembershipFilter) contextValidateFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.Filter != nil {

		if swag.IsZero(m.Filter) { // not required
			return nil
		}

		if err := m.Filter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *PagingOfRoleGroupSummaryAndGroupMembershipFilter) contextValidateRecords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Records); i++ {

		if m.Records[i] != nil {

			if swag.IsZero(m.Records[i]) { // not required
				return nil
			}

			if err := m.Records[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("records" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("records" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PagingOfRoleGroupSummaryAndGroupMembershipFilter) contextValidateSeverity(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	if err := m.Severity.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("severity")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("severity")
		}
		return err
	}

	return nil
}

func (m *PagingOfRoleGroupSummaryAndGroupMembershipFilter) contextValidateSortBy(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SortBy); i++ {

		if m.SortBy[i] != nil {

			if swag.IsZero(m.SortBy[i]) { // not required
				return nil
			}

			if err := m.SortBy[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sortBy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sortBy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PagingOfRoleGroupSummaryAndGroupMembershipFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PagingOfRoleGroupSummaryAndGroupMembershipFilter) UnmarshalBinary(b []byte) error {
	var res PagingOfRoleGroupSummaryAndGroupMembershipFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
